#!/bin/sh

LOGFILE="/var/log/recserver/monitorServers.log"

function  gettime()
{
    echo "`date \"+%G-%m-%d %H:%M:%S\"`"
}

function getfilesize()
{
    echo "`du -s $1 | awk '{print (}'`"
}

ps -ef | grep "monitorServers" | grep -v grep >> /dev/null
if [ "$?" = "1" ];then
	echo "$(gettime)   monitorServers is running, exit..." >> $LOGFILE
	exit 0
fi

#set env
export LIBVA_DRIVERS_PATH="/opt/intel/mediasdk/lib64"
export LIBVA_DRIVER_NAME="iHD"
export MFX_HOME="/opt/intel/mediasdk"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib64

#set dbg
ulimit -c unlimited
echo "/opt/Rec/core_%e_%p_%s_%g_%t" > /proc/sys/kernel/core_pattern

#add nginx env
export PATH=$PATH:/usr/local/nginx/sbin/
export PATH=$PATH:/usr/local/reach/bin/
export PATH=$PATH:/usr/local/reach/script/

#insmod driver
#cd /usr/local/reach/driver
#./install

#chang dir
cd /usr/local/reach/bin

while [ 1 = 1 ]
do
	    sleep 10

        # 1.start services
        ps -ef | grep "nginx" | grep -v grep >> /dev/null
        if [ "$?" = "1" ];then
            echo "$(gettime)   nginx is not running,Starting..." >> $LOGFILE
            nginx &
        fi

        ps -ef | grep "boa" | grep -v grep >> /dev/null
        if [ "$?" = "1" ];then
            echo "$(gettime)   boa is not running,Starting..." >> $LOGFILE
            boa &
        fi

        ps -ef | grep "vsftpd" | grep -v grep >> /dev/null
        if [ "$?" = "1" ];then
            echo "$(gettime)   vsftpd is not running,Starting..." >> $LOGFILE
            vsftpd &
        fi

        # 2.apps control
        AppNameStr="room_live room_record file_management sd_upgrade ftpserver control reach_edukit_app"
        AppArry=($AppNameStr)
        AppNum=${#AppArry[@]}

        for ((i = 0; i < $AppNum; i++))
        do
            sleep 2

            # 2.1 start apps
            AppName=${AppArry[$i]}
            ps -ef | grep $AppName | grep -v lib |grep -v grep >> /dev/null
            if [ "$?" = "1" ];then
                echo "$(gettime)   $AppName is not running,Starting..." >> $LOGFILE
                $AppName &
            fi
            echo "$(gettime) check  $AppName  [num:$AppNum]" >> $LOGFILE

            # 2.2 check coredump files of the apps
            #echo ${AppArry[$i]}
            CoreName=/opt/Rec/core_${AppArry[$i]}_*

            ls $CoreName &> /dev/null
            if [ $? == '0' ];then
                echo "$(gettime)  check  $AppName coredump file" >> $LOGFILE
                ls $CoreName --full-time | sort -k 6r | awk 'NR!=1{print $9}' | xargs rm -rf
            fi
        done


        #check log file size
        if [ -f $LOGFILE ];then
            FileSizeLimit=10240
            FileSize=$(getfilesize $LOGFILE)
            if [ $FileSize -gt $FileSizeLimit ];then
                yes|cp $LOGFILE "$LOGFILE"_bak
                rm -f $LOGFILE
                echo "$(gettime)" >> $LOGFILE
            fi
        fi

done

