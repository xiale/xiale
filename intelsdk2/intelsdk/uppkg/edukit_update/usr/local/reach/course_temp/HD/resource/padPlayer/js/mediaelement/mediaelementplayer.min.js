/*
* MediaElement.js
*/
// Namespace
var mejs = mejs || {};

// version number
mejs.version = '2.9.3';

/*
Utility methods
*/
mejs.Utility = {
	secondsToTimeCode: function(time, forceHours, showFrameCount, fps) {
		//add framecount
		if (typeof showFrameCount == 'undefined') {
		    showFrameCount=false;
		} else if(typeof fps == 'undefined') {
		    fps = 25;
		}
	
		var hours = Math.floor(time / 3600) % 24,
			minutes = Math.floor(time / 60) % 60,
			seconds = Math.floor(time % 60),
			frames = Math.floor(((time % 1)*fps).toFixed(3)),
			result = 
					( (forceHours || hours > 0) ? (hours < 10 ? '0' + hours : hours) + ':' : '')
						+ (minutes < 10 ? '0' + minutes : minutes) + ':'
						+ (seconds < 10 ? '0' + seconds : seconds)
						+ ((showFrameCount) ? ':' + (frames < 10 ? '0' + frames : frames) : '');
	
		return result;
	}
	
};

mejs.MediaFeatures = {
	init: function() {
		var
			t = this,
			nav = window.navigator,
			ua = window.navigator.userAgent.toLowerCase();

		// detect browsers (only the ones that have some kind of quirk we need to work around)
		t.isiPad = (ua.match(/ipad/i) !== null);
		t.isiPhone = (ua.match(/iphone/i) !== null);
		t.isiOS = t.isiPhone || t.isiPad;
		t.isAndroid = (ua.match(/android/i) !== null);
		t.isBustedAndroid = (ua.match(/android 2\.[12]/) !== null);
		t.isIE = (nav.appName.toLowerCase().indexOf("microsoft") != -1);
		t.isChrome = (ua.match(/chrome/gi) !== null);
		t.isFirefox = (ua.match(/firefox/gi) !== null);
		t.isWebkit = (ua.match(/webkit/gi) !== null);
		t.isGecko = (ua.match(/gecko/gi) !== null) && !t.isWebkit;
		t.isOpera = (ua.match(/opera/gi) !== null);
		t.hasTouch = ('ontouchstart' in window);
	}
};
mejs.MediaFeatures.init();

/*
extension methods to <video> or <audio> object
*/
mejs.HtmlMediaElement = {
	isFullScreen: false,

	setCurrentTime: function (time) {
		this.currentTime = time;
	},

	setMuted: function (muted) {
		this.muted = muted;
	},

	setVolume: function (volume) {
		this.volume = volume;
	},

	setVideoSize: function (width, height) {
		this.width = width;
		this.height = height;
	}
};

/*
 * MediaElementPlayer
 * http://mediaelementjs.com/
 *
 */
if (typeof jQuery != 'undefined') {
	mejs.$ = jQuery;
} else if (typeof ender != 'undefined') {
	mejs.$ = ender;
}
(function ($) {

	// default player values
	mejs.MepDefaults = {
		// url to poster (to fix iOS 3.x)
		poster: '',
		// initial volume when the player starts
		startVolume: 0.8,
		// useful for <audio> player loops
		loop: false,
		// forces the hour marker (##:00:00)
		alwaysShowHours: false,

		// show framecount in timecode (##:00:00:00)
		showTimecodeFrameCount: false,
		// used when showTimecodeFrameCount is set to true
		framesPerSecond: 25,
		
		// automatically calculate the width of the progress bar based on the sizes of other elements
		autosizeProgress : true,
		// force iPad's native controls
		iPadUseNativeControls: false,
		// force iPhone's native controls
		iPhoneUseNativeControls: false,	
		// force Android's native controls
		AndroidUseNativeControls: false,			
		// features to show
		features: ['playpause','current','progress','duration','volume','fullscreen'],
		// only for dynamic
		isVideo: true,
		
		// whenthis player starts, it will pause other players
		pauseOtherPlayers: true,
		
		// 全局播放器对象
		globalPlayer: null
		
	};

	mejs.mepIndex = 0;
	
	mejs.players = [];

	// wraps a MediaElement object in player controls
	mejs.MediaElementPlayer = function(node, o) {
		// enforce object, even without "new" (via John Resig)
		if ( !(this instanceof mejs.MediaElementPlayer) ) {
			return new mejs.MediaElementPlayer(node, o);
		} 

		var t = this;
		
		// these will be reset after the MediaElement.success fires
		t.$media = t.$node = $(node);
		t.node = t.media = t.$media[0];		
		
		// check for existing player
		if (typeof t.node.player != 'undefined') {
			return t.node.player;
		} else {
			// attach player to DOM node for reference
			t.node.player = t;
		}
				
				
		// try to get options from data-mejsoptions
		if (typeof o == 'undefined') {
			o = t.$node.data('mejsoptions');	
		}
			
		// extend default options
		t.options = $.extend({},mejs.MepDefaults,o);
		
		// add to player array (for focus events)
		mejs.players.push(t);
		
		// start up
		t.init();

		return t;
	};

	// actual player
	mejs.MediaElementPlayer.prototype = {
		hasFocus: false,
		controlsAreVisible: true,
		init: function() {
			var
				t = this,
				mf = mejs.MediaFeatures,
				tagName = t.media.tagName.toLowerCase();
		
			t.isVideo = (tagName !== 'audio' && t.options.isVideo);
		
			// remove native controls 			
			t.$media.removeAttr('controls');					
			
			// unique ID
			t.id = 'mep_' + mejs.mepIndex++;

			// build container
			t.container =
				$('<div id="' + t.id + '" class="mejs-container">'+
					'<div class="mejs-inner">'+
						'<div class="mejs-mediaelement"></div>'+
						'<div class="mejs-layers"></div>'+
						//'<div class="mejs-controls"></div>'+
						'<div class="mejs-clear"></div>'+
					'</div>' +
				'</div>')
				.addClass(t.$media[0].className)
				.insertBefore(t.$media);
			
			// add classes for user and content
			t.container.addClass(
				(mf.isAndroid ? 'mejs-android ' : '') +
				(mf.isiOS ? 'mejs-ios ' : '') +
				(mf.isiPad ? 'mejs-ipad ' : '') +
				(mf.isiPhone ? 'mejs-iphone ' : '') +
				(t.isVideo ? 'mejs-video ' : 'mejs-audio ')
			);	
				
			// move the <video/video> tag into the right spot
			if (mf.isiOS) {
				// sadly, you can't move nodes in iOS, so we have to destroy and recreate it!
				var $newMedia = t.$media.clone();
				t.container.find('.mejs-mediaelement').append($newMedia);
				t.$media.remove();
				t.$node = t.$media = $newMedia;
				t.node = t.media = $newMedia[0]
				
			} else {
				// normal way of moving it into place (doesn't work on iOS)
				t.container.find('.mejs-mediaelement').append(t.$media);
			}
			
			// 将播放控制条移动到浏览器底部
			t.controls = $('<div class="mejs-controls"></div>');
			$('#blankDiv').append(t.controls);
			t.layers = t.container.find('.mejs-layers');

			t.width = t.$media.attr('width') ? t.$media.attr('width') : 0;
			t.height = t.$media.attr('height') ? t.$media.attr('height') : 0;	

			// set the size, while we wait for the plugins to load below
			t.setPlayerSize(t.width, t.height, true);
			for(var m in mejs.HtmlMediaElement) {
				t.$media[0][m] = mejs.HtmlMediaElement[m];
			}
			t.meReady(t.$media[0]);
			
		},
		
		showControls: function(doAnimation) {
			var t = this;
			
			doAnimation = typeof doAnimation == 'undefined' || doAnimation;
			
			if (t.controlsAreVisible)
				return;
			
			if (doAnimation) {
				t.controls
					.css('visibility','visible')
					.stop(true, true).fadeIn(200, function() {t.controlsAreVisible = true;});	
	
				// any additional controls people might add and want to hide
				t.container.find('.mejs-control')
					.css('visibility','visible')
					.stop(true, true).fadeIn(200, function() {t.controlsAreVisible = true;});	
					
			} else {
				t.controls
					.css('visibility','visible')
					.css('display','block');
	
				// any additional controls people might add and want to hide
				t.container.find('.mejs-control')
					.css('visibility','visible')
					.css('display','block');
					
				t.controlsAreVisible = true;
			}
			
			t.setControlsSize();
			
		},

		hideControls: function(doAnimation) {
			var t = this;
			
			doAnimation = typeof doAnimation == 'undefined' || doAnimation;
			
			if (!t.controlsAreVisible)
				return;
			
			if (doAnimation) {
				// fade out main controls
				t.controls.stop(true, true).fadeOut(200, function() {
					$(this)
						.css('visibility','hidden')
						.css('display','block');
						
					t.controlsAreVisible = false;
				});	
	
				// any additional controls people might add and want to hide
				t.container.find('.mejs-control').stop(true, true).fadeOut(200, function() {
					$(this)
						.css('visibility','hidden')
						.css('display','block');
				});	
			} else {
				
				// hide main controls
				t.controls
					.css('visibility','hidden')
					.css('display','block');		
				
				// hide others
				t.container.find('.mejs-control')
					.css('visibility','hidden')
					.css('display','block');
					
				t.controlsAreVisible = false;
			}
		},		

		// Sets up all controls and events
		meReady: function(media) {			
			var t = this,
				mf = mejs.MediaFeatures,
				autoplayAttr = media.getAttribute('autoplay'),
				autoplay = !(typeof autoplayAttr == 'undefined' || autoplayAttr === null || autoplayAttr === 'false'),
				featureIndex,
				feature;

			// make sure it can't create itself again if a plugin reloads
			if (t.created)
				return;
			else
				t.created = true;			

			t.media = media;
			
			// 计算总的视频长度
			var duration = 0, videoList = t.options.videoList;
			if(videoList && videoList.length > 0) {
				for ( var i = 0; i < videoList.length; i++) {
					duration += videoList[i].totaltime;
				}
			}
			t.options.duration = duration;
			
			if (!(mf.isAndroid && t.options.AndroidUseNativeControls) && !(mf.isiPad && t.options.iPadUseNativeControls) && !(mf.isiPhone && t.options.iPhoneUseNativeControls)) {				
				
				// two built in features
				t.buildposter(t, t.controls, t.layers, t.media);
				t.buildoverlays(t, t.controls, t.layers, t.media);

				// add user-defined features/controls
				for (featureIndex in t.options.features) {
					feature = t.options.features[featureIndex];
					if (t['build' + feature]) {
						try {
							t['build' + feature](t, t.controls, t.layers, t.media);
						} catch (e) {}
					}
				}

				// reset all layers and controls
				t.setPlayerSize(t.width, t.height, true);
				t.setControlsSize();
				
				// FOCUS: when a video starts playing, it takes focus from other players (possibily pausing them)
				media.addEventListener('play', function() {
						
						// go through all other players
						for (var i=0, il=mejs.players.length; i<il; i++) {
							var p = mejs.players[i];
							if (p.id != t.id && t.options.pauseOtherPlayers && !p.paused && !p.ended) {
								p.pause();
							}
							p.hasFocus = false;
						}
						
						t.hasFocus = true;
				},false);
								

				// ended for all
				t.media.addEventListener('ended', function (e) {
					var startImage = t.options.startImage,
						endImage = t.options.endImage,
						videoList = t.options.videoList;
					
					if(videoList && t.currentFileIndex < videoList.length - 1) {
						// 切换分片
						var filePath = videoList[++t.currentFileIndex].src;
						t.isChangeVideoFile = true;
						if(t.options.globalPlayer.currStreamType) {
							if(t.options.globalPlayer.currStreamType == 1) {
								filePath = '../../SD/resource/' + filePath; 
							} else {
								filePath = '../../HD/resource/' + filePath;
							}
						}
						t.media.pause();
						t.media.src = filePath;
						t.media.load();
						t.media.play();
					} else {
						// 播放片尾图片
						if(endImage.image) {
							t.isEndPic = true;
							t.isStartEndPicPlaying = true;
							t.setPoster(endImage.image);
							t.container.find('.mejs-poster').show();
							t.bigPlay.hide();
//							t.playpause.removeClass('mejs-play').addClass('mejs-pause');
							t.drawPauseBtn();
							setTimeout(function() {
								t.isStartEndPicPlaying = false;
								if(startImage.image) {
									t.setPoster(startImage.image);
								}
								
//								t.playpause.removeClass('mejs-pause').addClass('mejs-play');
								t.drawPlayBtn();
//								if(mejs.MediaFeatures.hasTouch) {
									t.bigPlay.show();
//								}
								
								// 将视频src定位到第一个视频
								var filePath = videoList[0].src;
								if(t.options.globalPlayer.currStreamType) {
									if(t.options.globalPlayer.currStreamType == 1) {
										filePath = '../../SD/resource/' + filePath; 
									} else {
										filePath = '../../HD/resource/' + filePath;
									}
								}
								t.media.src = filePath;
								t.currentFileIndex = 0;
								
								try{
									t.media.setCurrentTime(0);
								} catch (exp) {
									
								}
								if (t.setCurrentRail)
									t.setCurrentRail();
								
								if (t.setCurrentRailByUser) {
									t.setCurrentRailByUser(0);
								}
								t.options.globalPlayer.currTimePoint = 0;
								
							}, endImage.duration * 1000);
							
							t.media.pause();
						} else {
							// 将视频src定位到第一个视频
							var filePath = videoList[0].src;
							if(t.options.globalPlayer.currStreamType) {
								if(t.options.globalPlayer.currStreamType == 1) {
									filePath = '../../SD/resource/' + filePath; 
								} else {
									filePath = '../../HD/resource/' + filePath;
								}
							}
							t.media.src = filePath;
							t.currentFileIndex = 0;
							try{
								t.media.setCurrentTime(0);
							} catch (exp) {
								
							}
							if (t.setCurrentRail)
								t.setCurrentRail();
							
							if (t.setCurrentRailByUser) {
								t.setCurrentRailByUser(0);
							}
							t.options.globalPlayer.currTimePoint = 0;
							
							t.media.pause();
							// 由于这个时候，在PC机上某些浏览器不响应pause事件，所以在这里修正一下子
							t.bigPlay.show();
							t.drawPlayBtn();
						}
						
						// 调用scorm标准中提供的方法
						if(t.options.onEnd && typeof t.options.onEnd == 'function') {
							t.options.onEnd();
						}
						
					}
					
					// 是否循环播放
					if (t.options.loop) {
						t.media.play();
					}
				}, false);
			}
			
			// 自动播放暂时还不行，因为加载不过来
			if (autoplay) {
				media.load();
				media.play();
			}		},

		handleError: function(e) {
			var t = this;
			t.controls.hide();
			// Tell user that the file cannot be played
			if (t.options.error) {
				t.options.error(e);
			}
		},

		setPlayerSize: function(width,height,flag) {
			var t = this;

			if (typeof width != 'undefined')
				t.width = width;
				
			if (typeof height != 'undefined')
				t.height = height;

			t.container.animate({
				'width': t.width + 'px',
				'height': t.height + 'px'
			}, 'normal');

			t.layers.children('.mejs-layer').animate({
				'width': t.width + 'px',
				'height': t.height + 'px'
			}, 'normal');
			
			t.$media.animate({
				'width': t.width + 'px',
				'height': t.height + 'px'
			}, 'normal');

		},

		setControlsSize: function() {
			var t = this,
				usedWidth = 0,
				railWidth = 0,
				rail = t.controls.find('.mejs-time-rail'),
				total = t.controls.find('.mejs-time-total'),
				current = t.controls.find('.mejs-time-current'),
				loaded = t.controls.find('.mejs-time-loaded'),
				others = rail.siblings();
			

			// allow the size to come from custom CSS
			if (t.options && !t.options.autosizeProgress) {
				// Also, frontends devs can be more flexible 
				// due the opportunity of absolute positioning.
				railWidth = parseInt(rail.css('width'));
			}
			
			// attempt to autosize
			if (railWidth === 0 || !railWidth) {
				
				// find the size of all the other controls besides the rail
				others.each(function() {
					if ($(this).css('position') != 'absolute' && $(this).is(":visible")) {
						usedWidth += $(this).outerWidth(true);
					}
				});
				
				// fit the rail into the remaining space
				railWidth = t.controls.width() - usedWidth - (rail.outerWidth(true) - rail.width());
			}

			// outer area
			rail.width(railWidth);
			// dark space
			total.width(railWidth - (total.outerWidth(true) - total.width()));
			
			if (t.setCurrentRail)
				t.setCurrentRail();				
		},


		buildposter: function(player, controls, layers, media) {
			var t = this,
				poster = 
				$('<div class="mejs-poster mejs-layer">' +
				'</div>')
					.appendTo(layers),
				posterUrl = player.$media.attr('poster');

			// prioriy goes to option (this is useful if you need to support iOS 3.x (iOS completely fails with poster)
			if (player.options.poster !== '') {
				posterUrl = player.options.poster;
			}	
				
			// second, try the real poster
			if (posterUrl !== '' && posterUrl != null) {
				t.setPoster(posterUrl);
			} else {
				poster.hide();
			}

			media.addEventListener('play',function() {
				poster.hide();
			}, false);
		},
		
		setPoster: function(url) {
			var t = this,
				posterDiv = t.container.find('.mejs-poster'),
				posterImg = posterDiv.find('img');
				
			if (posterImg.length == 0) {
				posterImg = $('<img width="100%" height="100%" />').appendTo(posterDiv);
			}	
			
			posterImg.attr('src', url);
		},

		buildoverlays: function(player, controls, layers, media) {
			if (!player.isVideo)
				return;

			var 
			t = this,
			loading = 
				$('<div class="mejs-overlay mejs-layer">'+
					'<div class="mejs-overlay-loading"><span></span></div>'+
				'</div>')
				.hide() // start out hidden
				.appendTo(layers),
			error = 
				$('<div class="mejs-overlay mejs-layer">'+
					'<div class="mejs-overlay-error"></div>'+
				'</div>')
				.hide() // start out hidden
				.appendTo(layers),
			// this needs to come last so it's on top
			bigPlay = 
				$('<div class="mejs-overlay mejs-layer mejs-overlay-play">'+
					'<div class="mejs-overlay-button"></div>'+
				'</div>')
				.appendTo(layers)
				.click(function() {
					if (media.paused) {
						var startImage = t.options.startImage;
						if(media.currentTime < 1 && !t.currentFileIndex) {
							if(startImage.image) {
								// 从0开始播放，有片头图片
								media.load();
								t.bigPlay.hide();
								t.setPoster(startImage.image);
								t.container.find('.mejs-poster').show();
//								t.playpause.removeClass('mejs-play').addClass('mejs-pause');
								t.drawPauseBtn();
								t.isStartEndPicPlaying = true;
								setTimeout(function() {
									t.isStartEndPicPlaying = false;
									// 用户在播放片头期间拖动了进度条，直接跳过
									if(!media.paused) {
										return false;
									}
									var filePath = t.options.videoList[0].src;
									if(t.options.globalPlayer.currStreamType) {
										if(t.options.globalPlayer.currStreamType == 1) {
											filePath = '../../SD/resource/' + filePath; 
										} else {
											filePath = '../../HD/resource/' + filePath;
										}
									}
									media.src = filePath;
									t.currentFileIndex = 0;
									media.load();
									media.play();
								}, startImage.duration * 1000);
							} else {
								// 从0开始播放，无片头图片
								var filePath = t.options.videoList[0].src;
								if(t.options.globalPlayer.currStreamType) {
									if(t.options.globalPlayer.currStreamType == 1) {
										filePath = '../../SD/resource/' + filePath; 
									} else {
										filePath = '../../HD/resource/' + filePath;
									}
								}
								media.src = filePath;
								t.currentFileIndex = 0;
								media.load();
								media.play();
							}
						} else {
							media.play();
						}
					} else {
						media.pause();
					}
				});
			
			t.bigPlay = bigPlay;
			// PC机上就不用了
			if(/*!mejs.MediaFeatures.hasTouch || */mejs.MediaFeatures.isiPhone) {
				bigPlay.hide();
			}
			
			// show/hide big play button
			media.addEventListener('play',function() {
				bigPlay.hide();
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
				error.hide();
				// 进度条不走的问题，修正一下
				if(t.isChangeVideoSrc && t.options.globalPlayer.currTrueTimePoint > 0) {
					window.setTimeout(function() {
						try {
							media.setCurrentTime(t.options.globalPlayer.currTrueTimePoint);
							t.isChangeVideoSrc = false;
						} catch(e) {
							window.setTimeout(function() {
								try {
									media.setCurrentTime(t.options.globalPlayer.currTrueTimePoint);
									t.isChangeVideoSrc = false;
								} catch (e) {
									window.setTimeout(function() {
										try {
											media.setCurrentTime(t.options.globalPlayer.currTrueTimePoint);
											t.isChangeVideoSrc = false;
										} catch (e) {
											// 如果延迟了7秒钟还是不行，那就直接松开进度条，让进度条继续往前走
											t.isChangeVideoSrc = false;
										}
									}, 2000);
								}
							}, 3000);
						}
					}, 2000);
				}
			}, false);	
			
			media.addEventListener('playing', function() {
				bigPlay.hide();
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
				error.hide();			
			}, false);

			media.addEventListener('seeking', function() {
				// android上显示不美观，先去掉
				loading.show();
//				controls.find('.mejs-time-buffering').show();
			}, false);

			media.addEventListener('seeked', function() {
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
			}, false);
	

			media.addEventListener('waiting', function() {
				// 在android上显示不美观，先去掉
//				loading.show();
				loading.hide();
//				controls.find('.mejs-time-buffering').show();
			}, false);			
			
			
			media.addEventListener('canplay',function() {
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
			}, false);	

			// error handling
			media.addEventListener('error',function() {
				loading.hide();
				controls.find('.mejs-time-buffering').hide();
				error.show();
				error.find('mejs-overlay-error').html("Error loading this resource");
			}, false);				
		},

		changeSkin: function(className) {
			this.container[0].className = 'mejs-container ' + className;
			this.setPlayerSize(this.width, this.height, true);
			this.setControlsSize();
		},
		play: function() {
			this.media.play();
		},
		pause: function() {
			this.media.pause();
		},
		load: function() {
			this.media.load();
		},
		setMuted: function(muted) {
			this.media.setMuted(muted);
		},
		setCurrentTime: function(time) {
			this.media.setCurrentTime(time);
		},
		getCurrentTime: function() {
			return this.media.currentTime;
		},
		setVolume: function(volume) {
			this.media.setVolume(volume);
		},
		getVolume: function() {
			return this.media.volume;
		},
		getPlayStatus: function() {
			var result = "play";
			if(this.media.paused) {
				result = "pause";
			}
			return result;
		}
	};

	// turn into jQuery plugin
	if (typeof jQuery != 'undefined') {
		jQuery.fn.mediaelementplayer = function (options) {
			var result = null;
			this.each(function () {
				result = new mejs.MediaElementPlayer(this, options);
			});
			return result;
		};
	}
	
	$(document).ready(function() {
		// auto enable using JSON attribute
		$('.mejs-player').mediaelementplayer();
	});
	
	// push out to window
	window.MediaElementPlayer = mejs.MediaElementPlayer;

})(mejs.$);

(function($) {

	$.extend(mejs.MepDefaults, {
		playpauseText: 'Play/Pause'
	});

	// PLAY/pause BUTTON
	$.extend(MediaElementPlayer.prototype, {
		buildplaypause: function(player, controls, layers, media) {
			var 
				t = this,
			play = 
				$('<div style="width:35px;"><canvas class="ctrlBtn" style="margin-top:0px; margin-left:5px;" id="playpausebtn" width="30" height="30"></canvas></div>')
				.appendTo(controls);
			
			var playpauseBtn = $('#playpausebtn');
				drawPlayBtn = function() {
					playpauseBtn.css({
						"background-image" : "url(padPlayer/css/pics/btn_play.png)",
						"background-repeat" : "no-repeat"
					});
					playpauseBtn.unbind().click(function() {
						// 播放片头片尾的时候，点击播放/停止按钮无效
						if(t.isStartEndPicPlaying) {
							return false;
						}
						playorpause();
						drawPauseBtn();
					});
					
				},
				
				drawPauseBtn = function() {
					playpauseBtn.css({
						"background-image" : "url(padPlayer/css/pics/btn_pause.png)",
						"background-repeat" : "no-repeat"
					});
					playpauseBtn.unbind().click(function() {
						// 播放片头片尾的时候，点击播放/停止按钮无效
						if(t.isStartEndPicPlaying) {
							return false;
						}
						playorpause();
						drawPlayBtn();
					});
				},
				
				playorpause = function() {
					if (media.paused) {
						var startImage = t.options.startImage;
						if(media.currentTime < 1 && !t.currentFileIndex) {
							if(startImage.image) {
								// 从0开始播放，有片头图片
								media.load();
								t.bigPlay.hide();
								t.setPoster(startImage.image);
								t.container.find('.mejs-poster').show();
//								play.removeClass('mejs-play').addClass('mejs-pause');
								t.drawPauseBtn();
								t.isStartEndPicPlaying = true;
								setTimeout(function() {
									t.isStartEndPicPlaying = false;
									// 用户在播放片头期间拖动了进度条，视频已经开始播放其他时间段了，直接跳过这里
									if(!media.paused) {
										return false;
									}
									var filePath = t.options.videoList[0].src; 
									if(t.options.globalPlayer.currStreamType) {
										if(t.options.globalPlayer.currStreamType == 1) {
											filePath = '../../SD/resource/' + filePath; 
										} else {
											filePath = '../../HD/resource/' + filePath;
										}
									}
									media.src = filePath;
									t.currentFileIndex = 0;
									media.load();
									media.play();
								}, startImage.duration * 1000);
							} else {
								// 从0开始播放，无片头图片
								var filePath = t.options.videoList[0].src; 
								if(t.options.globalPlayer.currStreamType) {
									if(t.options.globalPlayer.currStreamType == 1) {
										filePath = '../../SD/resource/' + filePath; 
									} else {
										filePath = '../../HD/resource/' + filePath;
									}
								}
								media.src = filePath;
								t.currentFileIndex = 0;
								media.load();
								media.play();
							}
						} else {
							media.play();
						}
					} else {
						media.pause();
					}
					return false;
				};
				
			drawPlayBtn();
			t.playpause = playpauseBtn;
			t.drawPlayBtn = drawPlayBtn;
			t.drawPauseBtn = drawPauseBtn;
			t.playorpause = playorpause;

			media.addEventListener('play',function() {
//				play.removeClass('mejs-play').addClass('mejs-pause');
				t.drawPauseBtn();
			}, false);
			media.addEventListener('playing',function() {
//				play.removeClass('mejs-play').addClass('mejs-pause');
				t.drawPauseBtn();
			}, false);


			media.addEventListener('pause',function() {
				if(t.isEndPic) {
					// 播放片尾图片的时候
					t.isEndPic = false;
				} else if(t.isChangeVideoFile) {
					// 切换文件分片的时候
					t.isChangeVideoFile = false;
				} else {
//					play.removeClass('mejs-pause').addClass('mejs-play');
					t.drawPlayBtn();
					
					// PC机上就不用了
					if (!mejs.MediaFeatures.isiPhone) {
						t.bigPlay.show();
					}
				}
				
			}, false);
			media.addEventListener('paused',function() {
//				play.removeClass('mejs-pause').addClass('mejs-play');
				t.drawPlayBtn();
			}, false);
		}
	});
	
})(mejs.$);
(function($) {

	$.extend(mejs.MepDefaults, {
		stopText: 'Stop'
	});

	// STOP BUTTON
	$.extend(MediaElementPlayer.prototype, {
		buildstop: function(player, controls, layers, media) {
			var t = this,
				stop = 
				$('<div class="mejs-button mejs-stop-button mejs-stop">' +
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.stopText + '"></button>' +
				'</div>')
				.appendTo(controls)
				.click(function() {
					if (!media.paused) {
						media.pause();
					}
					if (media.currentTime > 0) {
						media.setCurrentTime(0);	
						controls.find('.mejs-time-current').width('0px');
						controls.find('.mejs-time-handle').css('left', '0px');
						controls.find('.mejs-time-float-current').html( mejs.Utility.secondsToTimeCode(0) );
						controls.find('.mejs-currenttime').html( mejs.Utility.secondsToTimeCode(0) );					
						layers.find('.mejs-poster').show();
					}
				});
		}
	});
	
})(mejs.$);
(function($) {
	// progress/loaded bar
	$.extend(MediaElementPlayer.prototype, {
		buildprogress: function(player, controls, layers, media) {

			$('<div class="mejs-time-rail">'+
				'<span class="mejs-time-total">'+
					'<span class="mejs-time-buffering"></span>'+
					'<span class="mejs-time-loaded"></span>'+
					'<span class="mejs-time-current"></span>'+
					'<span class="mejs-time-handle"></span>'+
					'<span class="mejs-time-float">' + 
						'<span class="mejs-time-float-current">00:00</span>' + 
						'<span class="mejs-time-float-corner"></span>' + 
					'</span>'+
				'</span>'+
			'</div>')
				.appendTo(controls);
				controls.find('.mejs-time-buffering').hide();

			var 
				t = this,
				total = controls.find('.mejs-time-total'),
				loaded  = controls.find('.mejs-time-loaded'),
				current  = controls.find('.mejs-time-current'),
				handle  = controls.find('.mejs-time-handle'),
				timefloat  = controls.find('.mejs-time-float'),
				timefloatcurrent  = controls.find('.mejs-time-float-current'),
				handleMouseMove = function (e) {
					// 有必要阻止默认的行为
					e.preventDefault();
					// mouse position relative to the object
					var x = (mejs.MediaFeatures.hasTouch) ? e.touches[0].pageX : e.pageX,
						offset = total.offset(),
						width = total.outerWidth(),
						percentage = 0,
						newTime = 0,
						newTimeAll = 0,
						pos = x - offset.left;


					if (x > offset.left && x <= width + offset.left && t.options.duration) {
						percentage = ((x - offset.left) / width);
						newTimeAll = newTime = /*(percentage <= 0.01) ? 0 :*/ percentage * t.options.duration;
						// seek to where the mouse is
						if (mouseIsDown) {
							var index = 0, tempTime = 0;
							if(t.options.videoList) {
								var videoList = t.options.videoList;
								for(var i=0; i<videoList.length; i++) {
									tempTime += videoList[i].totaltime;
									if(newTime <= tempTime) {
										index = i;
										for(var j=0; j<i; j++) {
											newTime -= videoList[j].totaltime;
										}
										if(index == t.currentFileIndex) {
											media.setCurrentTime(newTime);
											// 修正一下
											t.isChangeVideoSrc = false;
											t.options.globalPlayer.syncIndexByUser(newTimeAll);
											t.options.globalPlayer.currTimePoint = newTimeAll;
										} else {
											t.currentFileIndex = index;
											var timeout = (mejs.MediaFeatures.hasTouch) ? 2500 : 300,
												filePath = videoList[index].src;
											if(t.options.globalPlayer.currStreamType) {
												if(t.options.globalPlayer.currStreamType == 1) {
													filePath = '../../SD/resource/' + filePath; 
												} else {
													filePath = '../../HD/resource/' + filePath;
												}
											}
											media.src = filePath;
											media.load();
											media.play();
											// 将进度条定位到当前位置，而不是实际的刚开始的位置
											t.isChangeVideoSrc = true;
											t.setCurrentRailByUser(newTimeAll);
											t.options.globalPlayer.syncIndexByUser(newTimeAll);
											t.options.globalPlayer.currTimePoint = newTimeAll;
											t.options.globalPlayer.currTrueTimePoint = newTime;
											setTimeout(function() {
//												if(mejs.MediaFeatures.isAndroid) {
//													media.setCurrentTime(newTime);
//													t.isChangeVideoSrc = false;
//												} 
											}, timeout);
										}
										break;
									}
								}
							}
						}

						// position floating time box
						if (!mejs.MediaFeatures.hasTouch) {
							timefloat.css('left', pos);
							timefloatcurrent.html( mejs.Utility.secondsToTimeCode(newTime) );
							timefloat.show();
						}
					}
				},
				
				mouseIsDown = false,
				mouseIsOver = false;

			// handle clicks
			//controls.find('.mejs-time-rail').delegate('span', 'click', handleMouseMove);
			if(!mejs.MediaFeatures.hasTouch) {
				total
				.bind('mousedown', function (e) {
					
					// only handle left clicks
					if (e.which === 1) {
						mouseIsDown = true;
						handleMouseMove(e);
						$(document)
						.bind('mousemove', function(e) {
							handleMouseMove(e);
						})
						.bind('mouseup', function (e) {
							mouseIsDown = false;
							timefloat.hide();
							$(document).unbind('mousemove');
							$(document).unbind('mouseup');
						});
						return false;
					}
				})
				.bind('mouseenter', function(e) {
					mouseIsOver = true;
					$(document).bind('mousemove.dur', function(e) {
						handleMouseMove(e);
					});
					if (!mejs.MediaFeatures.hasTouch) {
						timefloat.show();
					}
				})
				.bind('mouseleave',function(e) {
					mouseIsOver = false;
					if (!mouseIsDown) {
						$(document).unbind('.dur');
						timefloat.hide();
					}
				});
				
			} else {
				// 触摸屏另行添加事件
				total[0].addEventListener('touchstart', function(e) {
					mouseIsDown = true;
					handleMouseMove(e);
					document.addEventListener('touchmove', handleMouseMove, false);
					document.addEventListener('touchend', function(e) {
						mouseIsDown = false;
						timefloat.hide();
						document.removeEventListener('touchmove', handleMouseMove, false);
					}, false);
					
				}, false);
				
			}
				
			// loading
			media.addEventListener('progress', function (e) {
				player.setCurrentRail(e);
			}, false);

			// current time
			media.addEventListener('timeupdate', function(e) {
				player.setCurrentRail(e);
			}, false);
			
			
			// store for later use
			t.loaded = loaded;
			t.total = total;
			t.current = current;
			t.handle = handle;
		},
		setProgressRail: function(e) {
			
		},
		setCurrentRail: function() {
			var t = this;
			
			if(t.isChangeVideoSrc) {
				return false;
			}
			
			if (t.media.currentTime != undefined && t.options.duration) {
				
				// update bar and handle
				if (t.total && t.handle) {
					var beforeTime = 0;
					if(t.options.videoList) {
						for(var i=0; i < t.currentFileIndex; i++) {
							beforeTime += t.options.videoList[i].totaltime;
						}
					}
					var 
						newWidth = t.total.width() * (t.media.currentTime + beforeTime) / t.options.duration,
						handlePos = newWidth - (t.handle.outerWidth(true) / 2);

					t.current.width(newWidth);
					t.handle.css('left', handlePos);
				}
			}
		},
		
		setCurrentRailByUser: function(currentTime) {
			var t = this;
			if (t.options.duration) {
				
				// update bar and handle
				if (t.total && t.handle) {
					var 
						newWidth = t.total.width() * (currentTime) / t.options.duration,
						handlePos = newWidth - (t.handle.outerWidth(true) / 2);

					t.current.width(newWidth);
					t.handle.css('left', handlePos);
				}
			}
		},
		
		getCurrentTime: function() {
			var t = this, beforeTime = 0;
			if(t.options.videoList) {
				for(var i=0; i < t.currentFileIndex; i++) {
					beforeTime += t.options.videoList[i].totaltime;
				}
			}
			
			return t.media.currentTime + beforeTime;
		}
		
	});
})(mejs.$);
(function($) {
	
	// options
	$.extend(mejs.MepDefaults, {
		duration: -1,
		timeAndDurationSeparator: ' <span> | </span> '
	});


	// current and duration 00:00 / 00:00
	$.extend(MediaElementPlayer.prototype, {
		buildcurrent: function(player, controls, layers, media) {
			var t = this;
			
			$('<div class="mejs-time">'+
					'<span class="mejs-currenttime">' + (player.options.alwaysShowHours ? '00:' : '')
					+ (player.options.showTimecodeFrameCount? '00:00:00':'00:00')+ '</span>'+
					'</div>')
					.appendTo(controls);
			
			t.currenttime = t.controls.find('.mejs-currenttime');

			media.addEventListener('timeupdate',function() {
				player.updateCurrent();
			}, false);
		},


		buildduration: function(player, controls, layers, media) {
			var t = this, totalDuration = t.options.duration;
			
			if (controls.children().last().find('.mejs-currenttime').length > 0) {
				$(t.options.timeAndDurationSeparator +
					'<span class="mejs-duration">' + 
						(totalDuration > 0 ? 
							mejs.Utility.secondsToTimeCode(totalDuration, t.options.alwaysShowHours || t.media.duration > 3600, t.options.showTimecodeFrameCount,  t.options.framesPerSecond || 25) :
				   			((player.options.alwaysShowHours ? '00:' : '') + (player.options.showTimecodeFrameCount? '00:00:00':'00:00')) 
				   		) + 
					'</span>')
					.appendTo(controls.find('.mejs-time'));
			} else {

				// add class to current time
				controls.find('.mejs-currenttime').parent().addClass('mejs-currenttime-container');
				//alert(t.options.duration);
				$('<div class="mejs-time mejs-duration-container">'+
					'<span class="mejs-duration">' + 
						(totalDuration > 0 ? 
							mejs.Utility.secondsToTimeCode(totalDuration, t.options.alwaysShowHours, t.options.showTimecodeFrameCount,  t.options.framesPerSecond || 25) :
				   			((player.options.alwaysShowHours ? '00:' : '') + (player.options.showTimecodeFrameCount? '00:00:00':'00:00')) 
				   		) + 
					'</span>' +
				'</div>')
				.appendTo(controls);
			}
			
			t.durationD = t.controls.find('.mejs-duration');

			media.addEventListener('timeupdate',function() {
				player.updateDuration();
			}, false);
		},
		
		updateCurrent:  function() {
			var t = this;

			var beforeTime = 0,
				currentFileIndex = t.currentFileIndex || 0;
			if(t.options.videoList) {
				for(var i = 0; i < currentFileIndex; i++) {
					beforeTime += t.options.videoList[i].totaltime;
				}
			}
			
			if (t.currenttime) {
				t.currenttime.html(mejs.Utility.secondsToTimeCode((t.media.currentTime + beforeTime), t.options.alwaysShowHours || t.media.duration > 3600, t.options.showTimecodeFrameCount,  t.options.framesPerSecond || 25));
			}
		},
		
		getTotalTime: function() {
			return this.options.duration;
		},
		
		updateDuration: function() {	
//			var t = this;
//			
//			if (t.options.duration && t.durationD) {
//				t.durationD.html(mejs.Utility.secondsToTimeCode(t.options.duration, t.options.alwaysShowHours, t.options.showTimecodeFrameCount, t.options.framesPerSecond || 25));
//			}		
		}
	});

})(mejs.$);
(function($) {

	$.extend(mejs.MepDefaults, {
		muteText: 'Mute Toggle',
		hideVolumeOnTouchDevices: true,
		
		audioVolume: 'horizontal',
		videoVolume: 'vertical'
	});

	$.extend(MediaElementPlayer.prototype, {
		buildvolume: function(player, controls, layers, media) {
				
			// Android and iOS don't support volume controls
			if (mejs.MediaFeatures.hasTouch && this.options.hideVolumeOnTouchDevices)
				return;
			
			var t = this,
				mode = (t.isVideo) ? t.options.videoVolume : t.options.audioVolume,
				mute = (mode == 'horizontal') ?
				
				// horizontal version
				$('<div class="mejs-button mejs-volume-button mejs-mute">'+
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.muteText + '"></button>'+
				'</div>' +
				'<div class="mejs-horizontal-volume-slider">'+ // outer background
					'<div class="mejs-horizontal-volume-total"></div>'+ // line background
					'<div class="mejs-horizontal-volume-current"></div>'+ // current volume
					'<div class="mejs-horizontal-volume-handle"></div>'+ // handle
				'</div>'
				)
					.appendTo(controls) :
				
				// vertical version
				$('<div class="mejs-button mejs-volume-button mejs-mute">'+
					'<button type="button" aria-controls="' + t.id + '" title="' + t.options.muteText + '"></button>'+
					'<div class="mejs-volume-slider">'+ // outer background
						'<div class="mejs-volume-total"></div>'+ // line background
						'<div class="mejs-volume-current"></div>'+ // current volume
						'<div class="mejs-volume-handle"></div>'+ // handle
					'</div>'+
				'</div>')
					.appendTo(controls),
			volumeSlider = t.controls.find('.mejs-volume-slider, .mejs-horizontal-volume-slider'),
			volumeTotal = t.controls.find('.mejs-volume-total, .mejs-horizontal-volume-total'),
			volumeCurrent = t.controls.find('.mejs-volume-current, .mejs-horizontal-volume-current'),
			volumeHandle = t.controls.find('.mejs-volume-handle, .mejs-horizontal-volume-handle'),

			positionVolumeHandle = function(volume, secondTry) {

				if (!volumeSlider.is(':visible') && typeof secondTry != 'undefined') {
					volumeSlider.show();
					positionVolumeHandle(volume, true);
					volumeSlider.hide()
					return;
				}
			
				// correct to 0-1
				volume = Math.max(0,volume);
				volume = Math.min(volume,1);					
				
				// ajust mute button style
				if (volume == 0) {
					mute.removeClass('mejs-mute').addClass('mejs-unmute');
				} else {
					mute.removeClass('mejs-unmute').addClass('mejs-mute');
				}				

				// position slider 
				if (mode == 'vertical') {
					var 
					
						// height of the full size volume slider background
						totalHeight = volumeTotal.height(),
						
						// top/left of full size volume slider background
						totalPosition = volumeTotal.position(),
						
						// the new top position based on the current volume
						// 70% volume on 100px height == top:30px
						newTop = totalHeight - (totalHeight * volume);
	
					// handle
					volumeHandle.css('top', totalPosition.top + newTop - (volumeHandle.height() / 2));
	
					// show the current visibility
					volumeCurrent.height(totalHeight - newTop );
					volumeCurrent.css('top', totalPosition.top + newTop);
				} else {
					var 
					
						// height of the full size volume slider background
						totalWidth = volumeTotal.width(),
						
						// top/left of full size volume slider background
						totalPosition = volumeTotal.position(),
						
						// the new left position based on the current volume
						newLeft = totalWidth * volume;
	
					// handle
					volumeHandle.css('left', totalPosition.left + newLeft - (volumeHandle.width() / 2));
	
					// rezize the current part of the volume bar
					volumeCurrent.width( newLeft );
				}
			},
			handleVolumeMove = function(e) {
				
				var volume = null,
					totalOffset = volumeTotal.offset();
				
				// calculate the new volume based on the moust position
				if (mode == 'vertical') {
				
					var
						railHeight = volumeTotal.height(),
						totalTop = parseInt(volumeTotal.css('top').replace(/px/,''),10),
						newY = e.pageY - totalOffset.top;
						
					volume = (railHeight - newY) / railHeight;
						
					// the controls just hide themselves (usually when mouse moves too far up)
					if (totalOffset.top == 0 || totalOffset.left == 0)
						return;
					
				} else {
					var
						railWidth = volumeTotal.width(),
						newX = e.pageX - totalOffset.left;
						
					volume = newX / railWidth;
				}
				
				// ensure the volume isn't outside 0-1
				volume = Math.max(0,volume);
				volume = Math.min(volume,1);
				
				// position the slider and handle			
				positionVolumeHandle(volume);
				
				// set the media object (this will trigger the volumechanged event)
				if (volume == 0) {
					media.setMuted(true);
				} else {
					media.setMuted(false);
				}
				media.setVolume(volume);			
			},
			mouseIsDown = false,
			mouseIsOver = false;

			// SLIDER
			
			mute
				.hover(function() {
					volumeSlider.show();
					mouseIsOver = true;
				}, function() {
					mouseIsOver = false;	
						
					if (!mouseIsDown && mode == 'vertical')	{
						volumeSlider.hide();
					}
				});
			
			volumeSlider
				.bind('mouseover', function() {
					mouseIsOver = true;	
				})
				.bind('mousedown', function (e) {
					handleVolumeMove(e);
					$(document)
						.bind('mousemove.vol', function(e) {
							handleVolumeMove(e);
						})
						.bind('mouseup.vol', function () {
							mouseIsDown = false;
							$(document).unbind('.vol');

							if (!mouseIsOver && mode == 'vertical') {
								volumeSlider.hide();
							}
						});
					mouseIsDown = true;
						
					return false;
				});


			// MUTE button
			mute.find('button').click(function() {
				media.setMuted( !media.muted );
			});

			// listen for volume change events from other sources
			media.addEventListener('volumechange', function(e) {
				if (!mouseIsDown) {
					if (media.muted) {
						positionVolumeHandle(0);
						mute.removeClass('mejs-mute').addClass('mejs-unmute');
					} else {
						positionVolumeHandle(media.volume);
						mute.removeClass('mejs-unmute').addClass('mejs-mute');
					}
				}
			}, false);

			if (t.container.is(':visible')) {
				// set initial volume
				positionVolumeHandle(player.options.startVolume);
				// shim gets the startvolume as a parameter, but we have to set it on the native <video> and <audio> elements
				media.setVolume(player.options.startVolume);
			}
		}
	});
	
})(mejs.$);

(function($) {
	
	$.extend(mejs.MepDefaults, {
		usePluginFullScreen: true,
		newWindowCallback: function() { return '';},
		fullscreenText: 'Fullscreen'
	});
	
	$.extend(MediaElementPlayer.prototype, {
		
		isFullScreen: false,
		
		docStyleOverflow: null,
		
		buildfullscreen: function(player, controls, layers, media) {

			if (!player.isVideo)
				return;
				
			var t = this,		
				normalHeight = 0,
				normalWidth = 0,
				container = player.container,						
				fullscreenBtn = 
					$('<div class="mejs-button mejs-fullscreen-button">' + 
						'<button type="button" aria-controls="' + t.id + '" title="' + t.options.fullscreenText + '"></button>' + 
					'</div>')
					.appendTo(controls).hide();

			fullscreenBtn.click(function() {
				var isFullScreen = player.isFullScreen;													
				
				if (isFullScreen) {
					player.exitFullScreen();
				} else {						
					player.enterFullScreen();
				}
			});
					
			player.fullscreenBtn = fullscreenBtn;	
		},
		enterFullScreen: function() {
			
			var t = this;
						
			// store overflow 
			docStyleOverflow = document.documentElement.style.overflow;
			// set it to not show scroll bars so 100% will work
			document.documentElement.style.overflow = 'hidden';			
		
			// store sizing
			normalHeight = t.container.height();
			normalWidth = t.container.width();
			
			// make full size
			t.container
				.addClass('mejs-container-fullscreen')
				.width('100%')
				.height('100%');
				
			t.$media.css({
				'width': $(window).width() + 'px',
				'height': ($(window).height() - 30) + 'px'
			});
			
			t.layers.children('div')
				.width('100%')
				.height('100%');

			if (t.fullscreenBtn) {
				t.fullscreenBtn
					.removeClass('mejs-fullscreen')
					.addClass('mejs-unfullscreen');
			}

			t.setControlsSize();
			t.isFullScreen = true;
			
			// 视频全屏的时候，隐藏图片
			if(t.options.globalPlayer.hasVGAVideo) {
				t.options.globalPlayer.$imageConn.hide();
			}
		},
		
		exitFullScreen: function() {
			
			var t = this;		
		
			// restore scroll bars to document
			document.documentElement.style.overflow = docStyleOverflow;					
				
			t.container
				.removeClass('mejs-container-fullscreen')
				.width(normalWidth)
				.height(normalHeight);
			
			t.$media.css({
				'width': normalWidth + 'px',
				'height': normalHeight + 'px'
			});

			t.layers.children('div')
				.width(normalWidth)
				.height(normalHeight);

			t.fullscreenBtn
				.removeClass('mejs-unfullscreen')
				.addClass('mejs-fullscreen');

			t.setControlsSize();
			t.isFullScreen = false;
			
			// 视频非全屏的时候，显示图片
			if(t.options.globalPlayer.hasVGAVideo) {
				t.options.globalPlayer.$imageConn.show();
			}
		}	
	});

})(mejs.$);
