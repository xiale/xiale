/*
 * html5Player播放器
 * by 徐注光  2012.09
 */

(function($) {
var GlobalPlayer = GlobalPlayer || function() {
	this.init();
	GlobalPlayer.globalPlayer = this;
};

GlobalPlayer.skip = function(newTime) {
	var g =this.globalPlayer, t = this.mediaelementplayer, newTimeAll = newTime, index = 0, tempTime = 0;
	if(t.options.videoList) {
		var videoList = t.options.videoList;
		for(var i=0; i<videoList.length; i++) {
			tempTime += videoList[i].totaltime;
			if(newTime <= tempTime) {
				index = i;
				for(var j=0; j<i; j++) {
					newTime -= videoList[j].totaltime;
				}
				if(index == t.currentFileIndex) {
					t.media.setCurrentTime(newTime);
					// 修正一下
					t.isChangeVideoSrc = false;
					g.syncIndexByUser(newTimeAll);
					g.currTimePoint = newTimeAll;
				} else {
					var timeout = (mejs.MediaFeatures.hasTouch) ? 2500 : 300, 
						filePath = videoList[index].src;
					t.currentFileIndex = index;
					if(g.currStreamType) {
						if(g.currStreamType == 1) {
							filePath = '../../SD/resource/' + filePath; 
						} else {
							filePath = '../../HD/resource/' + filePath;
						}
					}
					t.media.src = filePath;
					t.media.load();
					t.media.play();
					t.isChangeVideoSrc = true;
					// 将进度条定位到当前位置，而不是实际的刚开始的位置
					t.setCurrentRailByUser(newTimeAll);
					g.syncIndexByUser(newTimeAll);
					g.currTimePoint = newTimeAll;
					g.currTrueTimePoint = newTime;
					setTimeout(function() {
//						if(mejs.MediaFeatures.isAndroid) {
//							t.media.setCurrentTime(newTime);
//							t.isChangeVideoSrc = false;
//						}
					}, timeout);
				}
				break;
			}
		}
	}
};

GlobalPlayer.prototype = {
	// 左右布局时，左边所占比例
	smallRate: 0.25,
	bigRate: false,
	seperateRate: false,
	
	// 布局类型，1：smallbig，2：bigsmall，3：picinpic
	layoutType: 1,
	
	// 视频区域的边空隙
	contentsPadding: 20,
	
	// 左右布局时，左右两路视频之间的距离
	widthLeftRight: 20,
	
	currTimeStamp: new Date().getTime(),
	
	preHot: null,
	
	currURL: null,

	// 是否是单路视频
	hasVGAVideo: false,
	
	picIndexHeight:0,
	
	// 是否有高清码流
	hasHighStream: false,
	
	// 当前流：1代表标清码流；2代表高清码流
	currStreamType: 1,
	
	// 用户定位的当前的时间点for Android
	currTimePoint: 0,
	
	// 由于android系统在旋转后再还原body高度会发生改变，现在将它们在开始的时候固定
	bodySizeShort: 0,
	
	// 执行window.resize的时间点。
	// 用来修正ipad中， 当content页面嵌入iframe中时，同一时间多次执行resize的情况
	resizeTime: 0,
	
	// 图片索引是否处于显示状态：0不显示；1显示图片；2显示图片和文字
	isPicIndexShow: 0,
	
	init: function() {
		var self = this, tempObj, sizeLong, sizeShort;
		// 初始化页面jQuery对象
		self.$body = $('body');
		self.$picIndexs = $('#picIndexs');
		self.$blankDiv = $('#blankDiv');
		self.$contents = $('#contents');
		self.$videoConn = $('#videoConn');
		self.$videoPlayer = $('#videoPlayer');
		self.$imageConn = $('#imageConn');
		self.$imgContainer = $('#imgContainer');
		self.$ctrlBtnConn = $('#ctrlBtnConn');
		self.$pageLoding = $('#pageLoding');
		
		// 屏蔽右键菜单及ESC键
		$(document).bind('contextmenu', function(evt) {
			try {
				evt.cancelBubble = true;
				evt.returnValue = false;
			} catch (e) {}
			return false;
		}).bind('keydown', function(evt) {
			if(evt.keyCode == 27) {
				try {
					evt.keyCode = 0;
					evt.returnValue = false;
				} catch (e) {}
				return false;
			}
		});
		// 将浏览器的尺寸记录下来
		sizeLong = self.$body.width();
		sizeShort = self.$body.height();
		if(sizeLong < sizeShort) {
			self.bodySizeShort = sizeLong;
		} else {
			self.bodySizeShort = sizeShort;
		}
		
		// 初始化参数
		self.bigRate = 1 - self.smallRate;
		self.seperateRate = self.smallRate;
		self.picIndexHeight = self.$picIndexs.innerHeight();
		self.hasHighStream = self.getUrlParam('isShowHSBtn');
		if(self.hasHighStream == 1) {
			self.hasHighStream = true;
		} else {
			self.hasHighStream = false;
		}
		
		// 配置参数信息
		var initParams = {
			iPadUseNativeControls: false,
			alwaysShowHours: true,
			onEnd: window.onEnd,
			globalPlayer: self
		};
		
		/* 读取配置文件，获取:
		        1.视频分片和片头片尾信息
		        2.视频分片信息
		        3.是否是单路视频点播
		*/
		$.ajax({
			url: 'index.xml',
			cache: false,
			dataType: 'xml',
			success: function(ret) {
				var startImage = {}, endImage = {};
				if(ret) {
					tempObj = $(ret).find('startimage');
					startImage.image = tempObj.attr('image');
					startImage.duration = tempObj.attr('duration');
					initParams.startImage = startImage;
					
					tempObj = $(ret).find('endimage');
					endImage.image = tempObj.attr('image');
					endImage.duration = tempObj.attr('duration');
					initParams.endImage = endImage;
					
					if(mejs.MediaFeatures.isiPhone) {
						initParams.startImage = {};
						initParams.endImage = {};
					}
					
					$.ajax({
						url: 'info.xml',
						dataType: 'xml',
						cache: false,
						success: function(ret) {
							var videoList = [];
							if(ret) {
								// 是否只有单路视频
								var jpgChannel = $(ret).find('channel>files[type="jpg"]');
								if(jpgChannel.length > 0) {
									var jpgUrls = [];
									self.hasVGAVideo = true;
									jpgChannel.find('file').each(function() {
										var $this = $(this), jpgUrl = {};
										jpgUrl['starttime'] = $this.attr('starttime');
										jpgUrl['url'] = $this.text();
										jpgUrls.push(jpgUrl);
									});
									self.jpgUrls = jpgUrls;
								}
								
								// 获取各个视频分片的路径
								$(ret).find('channel:first>files[type="mp4"]>file').each(function() {
									var tempObj = $(this), fileObj = {};
									fileObj.totaltime = 1 * tempObj.attr('totaltime');
									fileObj.src = tempObj.text();
									videoList.push(fileObj);
								});
								initParams.videoList = videoList;
								
							}
							// 包装video标签，封装一系列方法
							GlobalPlayer.mediaelementplayer = self.mediaelementplayer = $('#videoPlayer').mediaelementplayer(initParams);
							// 初始化单路视频的情况
							self.initSingleVideo();
							// 调整屏幕的尺寸大小
							self.adjustSize();
							// 加载索引
							self.loadIndex();
							// 初始化图片索引
							self.picIndexer.init();
							// 初始化右下角控制按钮
							self.drawCtrlBtns();
							// 初始化视频框事件
							self.initVideoEventListener();
							// 初始化图片框事件
							self.initImageEventListener();
							// 初始化浏览器大小变化和触摸屏方向变化事件
							$(window).resize(function() {
								var now = new Date().getTime();
								if(now - self.resizeTime < 500) {
									return false;
								} else {
									self.resizeTime = now;
								}
								if(self.mediaelementplayer.isFullScreen) {
									self.$videoConn.css({'border': '0'});
								}
								self.adjustSize();
								if(self.mediaelementplayer.isFullScreen) {
									setTimeout(function() {
										self.mediaelementplayer.fullscreenBtn.click().click();
										self.$videoConn.css({'border': '3px solid #EEE'});
									}, 500);
								}
							});
							// 单独播放视频课件的时候起作用
							if(mejs.MediaFeatures.isiPad) {
								window.addEventListener('orientationchange', function() {
									if(self.mediaelementplayer.isFullScreen) {
										self.$videoConn.css({'border': '0'});
									}
									self.adjustSize();
									if(self.mediaelementplayer.isFullScreen) {
										setTimeout(function() {
											self.mediaelementplayer.fullscreenBtn.click().click();
											self.$videoConn.css({'border': '3px solid #EEE'});
										}, 500);
									}
								}, false);
							}
							
							// iPhone上，显示原始播放按钮
							if(mejs.MediaFeatures.isiPhone) {
								self.mediaelementplayer.playpause.click().click();
							}
							
							// 调用父窗口的playInvokedBySilverlight方法
							if (window.parent.playInvokedBySilverlight) {
								window.parent.playInvokedBySilverlight();
							}
						}
					});
				}
			}
		});
		
	},
	
	getUrlParam: function(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
		var r = window.location.search.substr(1).match(reg);
		if (r != null) {
			return r[2].replace(/!/g, "/");
		}
		return null;
	},
	
	intToTime: function(dwSec) {
		var nHour, nMin, nSec,
		FormatInt = function(val) {
			if( val < 10 ) {
				return "0" + val;
			} else {
				return val.toString(10);
			}
		}
		nHour = parseInt(dwSec / 3600);
		nMin = parseInt((dwSec - nHour * 3600 )/ 60);
		nSec = dwSec - nHour * 3600 - nMin * 60;
		return FormatInt(nHour) + ":" + FormatInt(nMin) + ":" + FormatInt(nSec);
	},
	
	drawCtrlBtns: function() {
		var self = this;
		
		$('<span style="width:0px;height:0px;margin-right:5px;"></span>' + 
		  '<canvas class="ctrlBtn" id="fullScreenCavBtn" width="35" height="28"></canvas>' + 
		  '<canvas class="ctrlBtn forBiInput" id="smallbig" width="35" height="28"></canvas>' + 
		  '<canvas class="ctrlBtn forBiInput" id="picinpic" width="35" height="28"></canvas>' + 
		  '<canvas class="ctrlBtn forBiInput" id="hideIndex" width="35" height="28"></canvas>' + 
		  '<span style="width:0px;height:0px;margin-left:10px;"></span>')
		  .appendTo(self.mediaelementplayer.controls);
		
		$('<div class="ctrlBtn" id="lowHighStream" style="position:absolute;top:5px;right:5px;z-index:9999;width:30px;height:30px;"></div>')
		  .appendTo(self.$contents);
		
		// 只有一路视频
		if(!self.hasVGAVideo) {
			$('.forBiInput').remove();
		}
		
		// 没有高清码流
		if(!self.hasHighStream) {
			$('#lowHighStream').remove();
		}
		self.mediaelementplayer.setControlsSize();
		
		var	smallbig = $('#smallbig'),
			picinpic = $('#picinpic'),
			hideIndex = $('#hideIndex'),
			lowHighStream = $('#lowHighStream'),
			fullScreenCavBtn = $('#fullScreenCavBtn');
		
		smallbig.css({
			"background-image": "url(padPlayer/css/pics/model_smallbig1.png)",
			"background-repeat": "no-repeat"
		});
		smallbig.unbind().click(function() {
			if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
				return false;
			}
			
			smallbig.css({
				"background-image": "url(padPlayer/css/pics/model_smallbig1.png)",
				"background-repeat": "no-repeat"
			});
			
			picinpic.css({
				"background-image": "url(padPlayer/css/pics/model_picinpic.png)",
				"background-repeat": "no-repeat"
			})
			
			if(self.layoutType != 1) {
				self.layoutType = 1;
				self.seperateRate = self.smallRate;
				self.adjustVideoSizePosition();
			}
		});
		
		picinpic.css({
			"background-image": "url(padPlayer/css/pics/model_picinpic.png)",
			"background-repeat": "no-repeat"
		})
		picinpic.unbind().click(function() {
			if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
				return false;
			}
			
			smallbig.css({
				"background-image": "url(padPlayer/css/pics/model_smallbig.png)",
				"background-repeat": "no-repeat"
			});
			
			picinpic.css({
				"background-image": "url(padPlayer/css/pics/model_picinpic1.png)",
				"background-repeat": "no-repeat"
			})
			
			if(self.layoutType != 3) {
				self.layoutType = 3;
				self.adjustVideoSizePosition();
			}
		});
		
		
		var drawHDBtn = function() {
			// 高清码流按钮
			lowHighStream.css({
				'background-image': 'url(padPlayer/css/pics/sdPic.png)',
				"background-repeat": "no-repeat"
			});
			lowHighStream.unbind().click(function() {
				var now = new Date().getTime();
				if(self.currTimeStampforSH && (now - self.currTimeStampforSH < 6000)) {
					return false;
				} else {
					self.currTimeStampforSH = now;
				}
				
				var t = self.mediaelementplayer,
					currentFileIndex = t.currentFileIndex || 0,
					videoList = t.options.videoList,
					currentTime = t.media.currentTime,
					src = "../../HD/resource/" + videoList[currentFileIndex].src,
					timeout = (mejs.MediaFeatures.hasTouch) ? 6000 : 300,
					isPaused = t.media.paused,
					allTime = t.getCurrentTime();
				
				t.isChangeVideoSrc = true;
				t.setCurrentRailByUser(allTime);
				t.options.globalPlayer.currTrueTimePoint = currentTime;
				
				t.media.src = src;
				t.media.load();
				if(!isPaused) {
					t.media.play();
				}
				
				setTimeout(function() {
//					t.isChangeVideoSrc = false;
//					try {
//						t.media.currentTime = currentTime;
//					} catch(e) {
//						setTimeout(function(){
//							t.media.currentTime = currentTime;
//						}, timeout);
//					}
				}, timeout);
				
				self.currStreamType = 2;
				drawSDBtn();
			});
			
		},
		
		drawSDBtn = function() {
			// 标清码流按钮
			lowHighStream.css({
				'background-image': 'url(padPlayer/css/pics/hdPic.png)',
				"background-repeat": "no-repeat"
			});
			
			lowHighStream.unbind().click(function() {
				var now = new Date().getTime();
				if(self.currTimeStampforSH && (now - self.currTimeStampforSH < 6000)) {
					return false;
				} else {
					self.currTimeStampforSH = now;
				}
				
				var t = self.mediaelementplayer,
					currentFileIndex = t.currentFileIndex || 0,
					videoList = t.options.videoList,
					currentTime = t.media.currentTime,
					src = "../../SD/resource/" + videoList[currentFileIndex].src,
					timeout = (mejs.MediaFeatures.hasTouch) ? 6000 : 300,
					isPaused = t.media.paused,
					allTime = t.getCurrentTime();
				t.isChangeVideoSrc = true;
				t.setCurrentRailByUser(allTime);
				t.options.globalPlayer.currTrueTimePoint = currentTime;
				
				t.media.src = src;
				t.media.load();
				if(!isPaused) {
					t.media.play();
				}
				
				setTimeout(function() {
//					t.isChangeVideoSrc = false;
//					try {
//						t.media.currentTime = currentTime;
//					} catch(e) {
//						setTimeout(function(){
//							t.media.currentTime = currentTime;
//						}, timeout);
//					}
				}, timeout);
				
				self.currStreamType = 1;
				drawHDBtn();
			});
		},
		
		drawEnterFullBtn = function() {
			// 进入视频全屏按钮
			if(!self.hasVGAVideo) {
				fullScreenCavBtn.css({
					'background-image': 'url(padPlayer/css/pics/single_normal.png)',
					"background-repeat": "no-repeat"
				});
			} else {
				fullScreenCavBtn.css({
					'background-image': 'url(padPlayer/css/pics/double_normal.png)',
					"background-repeat": "no-repeat"
				});
			}
			smallbig.show();picinpic.show();hideIndex.show();
			self.mediaelementplayer.setControlsSize();
			fullScreenCavBtn.unbind().click(function() {
				// 进入视频全屏
				self.mediaelementplayer.fullscreenBtn.click();
				if(!self.hasVGAVideo) {
					drawExitFullBtn();
				} else {
					drawEnterFullBtnforVGA();
				}
			});
		},
		
		drawEnterFullBtnforVGA = function() {
			// 进入VGA全屏按钮
			fullScreenCavBtn.css({
				'background-image': 'url(padPlayer/css/pics/double_video_full.png)',
				"background-repeat": "no-repeat"
			});
			smallbig.hide();picinpic.hide();hideIndex.hide();
			self.mediaelementplayer.setControlsSize();
			$(fullScreenCavBtn).unbind().click(function() {
				// 退出视频全屏
				self.mediaelementplayer.fullscreenBtn.click();
				// 进入VGA全屏
				enterFullScreenVGA();
				drawExitFullBtn();
			});
			
		},
		
		drawExitFullBtn = function() {
			// 退出全屏按钮
			if(!self.hasVGAVideo) {
				fullScreenCavBtn.css({
					'background-image': 'url(padPlayer/css/pics/single_full.png)',
					"background-repeat": "no-repeat"
				});
			} else {
				fullScreenCavBtn.css({
					'background-image': 'url(padPlayer/css/pics/double_ppt_full.png)',
					"background-repeat": "no-repeat"
				});
			}
			smallbig.hide();picinpic.hide();hideIndex.hide();
			self.mediaelementplayer.setControlsSize();
			$(fullScreenCavBtn).unbind().click(function() {
				// 退出VGA全屏
				if(!self.hasVGAVideo) {
					self.mediaelementplayer.fullscreenBtn.click();
				} else {
					exitFullScreenVGA();
				}
				drawEnterFullBtn();
			});
		},
		
		enterFullScreenVGA = function() {
			// 将VGA原来的尺寸和位置以及视频的left记下来
			self.currentVideoCSS = {
				'left': self.$videoConn.css('left')	
			};
			self.currentVGACSS = {
				'top': self.$imageConn.css('top'),
				'left': self.$imageConn.css('left'),
				'width': self.$imageConn.css('width'),
				'height': self.$imageConn.css('height'),
				'z-index': self.$imageConn.css('z-index') 
			};
			
			var $window = $(window),
				windowWidth = $window.width(),
				windowHeight = self.$contents.height() + self.$picIndexs.height() - 20,
				width, height, top = 0, left = 0;
			if(windowHeight / windowWidth > 0.75) {
				width = windowWidth;
				height = width * 3 / 4;
				top = (windowHeight - height) / 2;
			} else {
				height = windowHeight;
				width = height * 4 / 3;
				left = (windowWidth - width) / 2;
			}
			
			// 将VGA全屏
			self.$imageConn.css({
				'top': top + 'px',
				'left': left + 'px',
				'width': width + 'px',
				'height': height + 'px',
				'z-index': '1000' 
			});
			
			// 将视频路隐藏
			self.$videoConn.css({
				left: -(self.$videoConn.width() + 50) + 'px'
			});
			
			// 隐藏图片索引
			$('#wrap').css({'height': '0px'}).find('canvas').hide();
			
			self.isFullScreenVGA = true;
		},
		
		exitFullScreenVGA = function() {
			self.$imageConn.css(self.currentVGACSS);
			self.$videoConn.css(self.currentVideoCSS);
			//alert(self.isPicIndexShow);
			if(self.isPicIndexShow > 0) {
				$('#wrap').css({'height': '100%'}).find('canvas').show();
				if(self.isPicIndexShow > 1) {
					$('.panel .timeText').show();
				}
			}
			self.isFullScreenVGA = false;
		},
		
		drawNormalIndexBtn = function() {
			//$('.panel .timeText').show();
			hideIndex.css({
				'background-image': 'url(padPlayer/css/pics/index_pic_word.png)',
				"background-repeat": "no-repeat"
			});
			
			hideIndex.unbind().click(function() {
				// 隐藏文字索引
				if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
					return false;
				}
				$('.panel .timeText').hide();
				self.isPicIndexShow = 1;
				drawhideIndexBtn();
			});
		},
		
		drawhideIndexBtn = function() {
			hideIndex.css({
				'background-image': 'url(padPlayer/css/pics/index_pic.png)',
				"background-repeat": "no-repeat"
			});
			hideIndex.unbind().click(function() {
				// 隐藏图片索引
				if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
					return false;
				}
				self.$picIndexs.height(0).find('#wrap').css({'height': '0'}).find('canvas').hide();
				self.isPicIndexShow = 0;
				self.adjustSize();
				drawShowIndexBtn();
			});
		},
		
		drawShowIndexBtn = function() {
			hideIndex.css({
				'background-image': 'url(padPlayer/css/pics/index_none.png)',
				"background-repeat": "no-repeat"
			});
			hideIndex.unbind().click(function() {
				// 显示图片，文字索引
				if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
					return false;
				}
				if(self.hasVGAVideo) {
					self.$picIndexs.height(self.picIndexHeight).find('#wrap').css({'height': '100%'}).find('canvas').show();
					$('.panel .timeText').show();
					self.isPicIndexShow = 2;
				}
				self.adjustSize();
				drawNormalIndexBtn();
			});
		};
		
		if(self.currStreamType == 1) {
			drawHDBtn();
		} else {
			drawSDBtn();
		}
		
		drawEnterFullBtn();
		drawhideIndexBtn();
		//默认隐藏图片索引
		hideIndex.click();
		self.enterFullScreenVGA = enterFullScreenVGA;
		
	},
	
	loadIndex: function() {
		var self = this;
		$.ajax({
			url: 'index.xml',
			dataType: 'xml',
			success: function(ret) {
				var root = $(ret).find('indexs');
				if(root.length > 0) {
					// 图片索引
					self.parseNodeToPicIndex(root);
					//进行循环扫描
					var timerID = setInterval(function(){self.syncIndex();},1000);
				}
			}
		});
	},
	
	parseNodeToPicIndex: function(parentNode) {
		var self = this;
		self.picIndexer.picsSum = 0,
		scrollConnWidth = $('#scrollConn').width();
		parentNode.children().each(function() {
			var $this = $(this);
			self.picIndexer.picsSum++;
			var $picItem = $('<div id="panel' + self.picIndexer.picsSum + '" class="panel">' + 
					'<div class="timeText">' + self.intToTime(parseInt($this.attr('time'))) + '</div>' + 
					'<a href="javascript:this.GlobalPlayer.skip(' + $this.attr('time') + ');"><img class="lazy" src="padPlayer/css/pics/grey.gif" data-original="' + $this.attr('image') + '" /></a>' + 
				'</div>'	
			  )
			  .data({'time': $this.attr('time')})
			  .appendTo('#scroll')
			  .find('img').fadeTo('fast', 0.4);
		});
		
		self.picIndexer.panelWidth = $('.panel').innerWidth();
		// 调整scroll的宽度
		$('#scroll').css({'width':self.picIndexer.panelWidth * self.picIndexer.picsSum + 'px'});
		
		// 懒加载部分图片
		$('img.lazy').each(function() {
			if($(this).offset().left < scrollConnWidth){
				$(this).lazyload();
			}
		});

	},
	
	syncIndex: function() {
		var self = this;
		if(self.mediaelementplayer.isChangeVideoSrc) {
			return false;
		}
		
		var	t = self.mediaelementplayer,
			ntime = beforeTime = 0;
		
		if(t.options.videoList) {
			for(var i=0; i < t.currentFileIndex; i++) {
				beforeTime += t.options.videoList[i].totaltime;
			}
		}
		
		ntime = parseInt(t.media.currentTime + beforeTime);
		
		// Android VGA 图片对应修正。因为在android中，点了索引图片后，往往会先跳到分片开始处
		if(mejs.MediaFeatures.isAndroid && ntime <= self.currTimePoint) {
			return false;
		}
		
		if(self.jpgUrls && self.jpgUrls.length > 0) {
			for(var i = self.jpgUrls.length - 1; i >= 0; i--) {
				var newTime = self.jpgUrls[i]['starttime']; 
				if(newTime < (ntime + 1)) {
					var newURL = self.jpgUrls[i]['url'];
					if(self.currURL != newURL) {
						// 同步大图片
						self.$imgContainer.attr('src', newURL);
						self.currURL = newURL;
						
						// 同步图片索引
						$('.panel').each(function() {
							var $this = $(this);
							if($this.data('time') == newTime) {
								var panelID = $this.attr('id');
								self.picIndexer.setCurrPic(panelID);
								return;
							}
						});
					}
					break;
				}
			}
		}
	},
	
	syncIndexByUser: function(ntime) {
		var self = this,
			t = self.mediaelementplayer;
		
		if(self.jpgUrls && self.jpgUrls.length > 0) {
			for(var i = self.jpgUrls.length - 1; i >= 0; i--) {
				var newTime = self.jpgUrls[i]['starttime']; 
				if(newTime < (ntime + 1)) {
					var newURL = self.jpgUrls[i]['url'];
					if(self.currURL != newURL) {
						// 同步大图片
						self.$imgContainer.attr('src', newURL);
						self.currURL = newURL;
						
						// 同步图片索引
						$('.panel').each(function() {
							var $this = $(this);
							if($this.data('time') == newTime) {
								var panelID = $this.attr('id');
								self.picIndexer.setCurrPic(panelID);
								return;
							}
						});
					}
					break;
				}
			}
		}
	},
	
	adjustPageSize: function() {
		var self = this,
			picIndexsHeight = self.$picIndexs.outerHeight(true),
			blankDivHeight = self.$blankDiv.outerHeight(true),
			bodyHeight = self.$body.outerHeight(true);
		
		// Android 系统有点bug
		if(mejs.MediaFeatures.isAndroid) {
			//bodyHeight = (self.$body.outerWidth(true) > self.$body.outerHeight(true)) ? self.bodySizeShort : self.$body.outerHeight(true);
		}
		
		self.$contents.height(bodyHeight - picIndexsHeight - blankDivHeight);
	},
	
	adjustVideoSizePosition: function() {
		var	self = this,
			videoConnWidth = 0,
			videoConnHeight = 0,
			videoConnTop = 0,
			videoConnLeft = 0,
			imageConnWidth = 0,
			imageConnHeight = 0,
			imageConnTop = 0,
			imageConnLeft = 0,
			rate = 0;
		
		var contentsWidth = self.$contents.width() - this.contentsPadding * 2 - this.widthLeftRight,
			contentsHeight = self.$contents.height() - this.contentsPadding * 2,
			contentsLeftWidth = contentsWidth * this.seperateRate,
			contentsRightWidth = contentsWidth * (1 - this.seperateRate),
			videoConnBorder = (self.$videoConn.outerWidth() - self.$videoConn.innerWidth()) / 2,
			imageConnBorder = (self.$imageConn.outerWidth() - self.$imageConn.innerWidth()) / 2;
		
		var videoImageModel = (self.$videoConn.attr('class').indexOf('video-left') != -1) ? true : false;
		if(!self.hasVGAVideo) {
			videoImageModel = false;
		}
		
		if(this.layoutType == 1 || this.layoutType == 2) {
			// smallbig和bigsmall布局
			if(videoImageModel) {
				// 计算视频位置大小
				rate = (contentsHeight - videoConnBorder * 2) / (contentsLeftWidth - videoConnBorder * 2);
				if(rate > 0.75) {
					videoConnWidth = contentsLeftWidth;
					videoConnHeight = ((videoConnWidth - videoConnBorder * 2) * 3) / 4 + videoConnBorder * 2;
					videoConnTop = (contentsHeight - videoConnHeight) / 2 + this.contentsPadding;
					//videoConnLeft = this.contentsPadding;
				} else {
					videoConnHeight = contentsHeight;
					videoConnWidth = ((videoConnHeight - videoConnBorder * 2) * 4) / 3 + videoConnBorder * 2;
					videoConnTop = this.contentsPadding;
					//videoConnLeft = (contentsLeftWidth - videoConnWidth) / 2 + this.contentsPadding;
				}
				
				
				// 计算图片位置大小
				rate = (contentsHeight - imageConnBorder * 2) / (contentsRightWidth - imageConnBorder * 2);
				if(rate > 0.75) {
					imageConnWidth = contentsRightWidth;
					imageConnHeight = ((imageConnWidth - imageConnBorder * 2) * 3) / 4 + imageConnBorder * 2;
					imageConnTop = (contentsHeight - imageConnHeight) / 2 + this.contentsPadding;
					//imageConnLeft = contentsLeftWidth + this.contentsPadding;
				} else {
					imageConnHeight = contentsHeight;
					imageConnWidth = ((imageConnHeight - imageConnBorder * 2) * 4) / 3 + imageConnBorder * 2;
					imageConnTop = this.contentsPadding;
					//imageConnLeft = contentsLeftWidth + (contentsRightWidth - imageConnWidth) / 2 + this.contentsPadding;
				}
				
				videoConnLeft = (self.$contents.width() - videoConnWidth - imageConnWidth - this.widthLeftRight) / 2;
				imageConnLeft = (self.$contents.width() - videoConnWidth - imageConnWidth - this.widthLeftRight) / 2 + videoConnWidth + this.widthLeftRight;
				
				// 调整视频位置大小
				self.$videoConn.animate({
					'width': videoConnWidth - videoConnBorder * 2 + 'px',
					'height': videoConnHeight - videoConnBorder * 2 + 'px',
					'top': videoConnTop + 'px',
					'left': videoConnLeft + 'px'
				}, 'normal');
				
				if(!self.firstAdjusted) {
					self.mediaelementplayer.setPlayerSize(videoConnWidth - videoConnBorder * 2, videoConnHeight - videoConnBorder * 2, true);
					self.firstAdjusted = true;
				} else {
					self.mediaelementplayer.setPlayerSize(videoConnWidth - videoConnBorder * 2, videoConnHeight - videoConnBorder * 2);
				}
				self.mediaelementplayer.setControlsSize();
				
				// 调整图片位置大小
				self.$imageConn.animate({
					'width': imageConnWidth - imageConnBorder * 2 + 'px',
					'height': imageConnHeight - imageConnBorder * 2 + 'px',
					'top': imageConnTop + 'px',
					'left': imageConnLeft + 'px'
				}, 'normal');
				
			} else {
				// 计算图片位置大小
				rate = (contentsHeight - imageConnBorder * 2) / (contentsLeftWidth - imageConnBorder * 2);
				if(rate > 0.75) {
					imageConnWidth = contentsLeftWidth;
					imageConnHeight = ((imageConnWidth - imageConnBorder * 2) * 3) / 4 + imageConnBorder * 2;
					imageConnTop = (contentsHeight - imageConnHeight) / 2 + this.contentsPadding;
					//imageConnLeft = this.contentsPadding;
				} else {
					imageConnHeight = contentsHeight;
					imageConnWidth = ((imageConnHeight - imageConnBorder * 2) * 4) / 3 + imageConnBorder * 2;
					imageConnTop = this.contentsPadding;
					//imageConnLeft = (contentsLeftWidth - imageConnWidth) / 2 + this.contentsPadding;
				}
				
				// 计算视频位置大小
				rate = (contentsHeight - videoConnBorder * 2) / (contentsRightWidth - videoConnBorder * 2);
				if(rate > 0.75) {
					videoConnWidth = contentsRightWidth;
					videoConnHeight = ((videoConnWidth - videoConnBorder * 2) * 3) / 4 + videoConnBorder * 2;
					videoConnTop = (contentsHeight - videoConnHeight) / 2 + this.contentsPadding;
					//videoConnLeft = contentsLeftWidth + this.contentsPadding;
				} else {
					videoConnHeight = contentsHeight;
					videoConnWidth = ((videoConnHeight - videoConnBorder * 2) * 4) / 3 + videoConnBorder * 2;
					videoConnTop = this.contentsPadding;
					//videoConnLeft = contentsLeftWidth + (contentsRightWidth - videoConnWidth) / 2 + this.contentsPadding;
				}
				
				imageConnLeft = (self.$contents.width() - videoConnWidth - imageConnWidth - this.widthLeftRight) / 2;
				videoConnLeft = (self.$contents.width() - videoConnWidth - imageConnWidth - this.widthLeftRight) / 2 + imageConnWidth + this.widthLeftRight;
				
				// 调整图片位置大小
				self.$imageConn.animate({
					'width': imageConnWidth - imageConnBorder * 2 + 'px',
					'height': imageConnHeight - imageConnBorder * 2 + 'px',
					'top': imageConnTop + 'px',
					'left': imageConnLeft + 'px'
				}, 'normal');
				
				// 调整视频位置大小
				self.$videoConn.animate({
					'width': videoConnWidth - videoConnBorder * 2 + 'px',
					'height': videoConnHeight - videoConnBorder * 2 + 'px',
					'top': videoConnTop + 'px',
					'left': videoConnLeft + 'px'
				}, 'normal');
				
				if(!self.firstAdjusted) {
					self.mediaelementplayer.setPlayerSize(videoConnWidth - videoConnBorder * 2, videoConnHeight - videoConnBorder * 2, true);
					self.firstAdjusted = true;
				} else {
					self.mediaelementplayer.setPlayerSize(videoConnWidth - videoConnBorder * 2, videoConnHeight - videoConnBorder * 2);
				}
				self.mediaelementplayer.setControlsSize();
			}
			
		} else {
			// picinpic布局
			contentsWidth = self.$contents.width() - this.contentsPadding * 2;
			contentsHeight = self.$contents.height() - this.contentsPadding * 2;
			if(videoImageModel) {
				rate = (contentsHeight - imageConnBorder * 2) / (contentsWidth - imageConnBorder * 2);
				if(rate > 0.75) {
					imageConnWidth = contentsWidth;
					imageConnHeight = ((imageConnWidth - imageConnBorder * 2) * 3) / 4 + imageConnBorder * 2;
					imageConnTop = (contentsHeight - imageConnHeight) / 2 + this.contentsPadding;
				} else {
					imageConnHeight = contentsHeight;
					imageConnWidth = ((imageConnHeight - imageConnBorder * 2) * 4) / 3 + imageConnBorder * 2;
					imageConnTop = this.contentsPadding;
				}
				
				imageConnLeft = (self.$contents.width() - imageConnWidth) / 2;
				videoConnWidth = (imageConnWidth - imageConnBorder * 2) / 3 + videoConnBorder * 2;
				videoConnHeight = (imageConnHeight - imageConnBorder * 2) / 3 + videoConnBorder * 2;
				videoConnTop = imageConnTop + imageConnHeight - videoConnHeight;
				videoConnLeft = imageConnLeft + imageConnWidth - videoConnWidth;
				
			} else {
				rate = (contentsHeight - videoConnBorder * 2) / (contentsWidth - videoConnBorder * 2);
				if(rate > 0.75) {
					videoConnWidth = contentsWidth;
					videoConnHeight = ((videoConnWidth - videoConnBorder * 2) * 3) / 4 + videoConnBorder * 2;
					videoConnTop = (contentsHeight - videoConnHeight) / 2 + this.contentsPadding;
				} else {
					videoConnHeight = contentsHeight;
					videoConnWidth = ((videoConnHeight - videoConnBorder * 2) * 4) / 3 + videoConnBorder * 2;
					videoConnTop = this.contentsPadding;
				}
				
				videoConnLeft = (self.$contents.width() - videoConnWidth) / 2;
				imageConnWidth = (videoConnWidth - videoConnBorder * 2) / 3 + imageConnBorder * 2;
				imageConnHeight = (videoConnHeight - videoConnBorder * 2) / 3 + imageConnBorder * 2;
				imageConnTop = videoConnTop + videoConnHeight - imageConnHeight;
				imageConnLeft = videoConnLeft + videoConnWidth - imageConnWidth;
			}
			
			// 调整图片位置大小
			self.$imageConn.animate({
				'width': imageConnWidth - imageConnBorder * 2 + 'px',
				'height': imageConnHeight - imageConnBorder * 2 + 'px',
				'top': imageConnTop + 'px',
				'left': imageConnLeft + 'px'
			}, 'normal');
			
			// 调整视频位置大小
			self.$videoConn.animate({
				'width': videoConnWidth - videoConnBorder * 2 + 'px',
				'height': videoConnHeight - videoConnBorder * 2 + 'px',
				'top': videoConnTop + 'px',
				'left': videoConnLeft + 'px'
			}, 'normal');
			
			if(!self.firstAdjusted) {
				self.mediaelementplayer.setPlayerSize(videoConnWidth - videoConnBorder * 2, videoConnHeight - videoConnBorder * 2, true);
				self.firstAdjusted = true;
			} else {
				self.mediaelementplayer.setPlayerSize(videoConnWidth - videoConnBorder * 2, videoConnHeight - videoConnBorder * 2);
			}
			self.mediaelementplayer.setControlsSize();
		}
		
		// 调整重叠顺序
		if(this.layoutType == 1) {
			if(videoImageModel) {
				self.$videoConn.css({'z-index': 999});
				self.$imageConn.css({'z-index': 998});
			} else {
				self.$videoConn.css({'z-index': 998});
				self.$imageConn.css({'z-index': 999});
			}
		} else if(this.layoutType == 2) {
			if(videoImageModel) {
				self.$videoConn.css({'z-index': 998});
				self.$imageConn.css({'z-index': 999});
			} else {
				self.$videoConn.css({'z-index': 999});
				self.$imageConn.css({'z-index': 998});
			}
		} else {
			if(videoImageModel) {
				self.$videoConn.css({'z-index': 999});
				self.$imageConn.css({'z-index': 998});
			} else {
				self.$videoConn.css({'z-index': 998});
				self.$imageConn.css({'z-index': 999});
			}
		}
		
		if(self.isFullScreenVGA) {
			setTimeout(self.enterFullScreenVGA, 500);
		}
			
	},
	
	initSingleVideo: function() {
		var self = this;
		// 将视频路显示出来
		self.$pageLoding.hide();
		self.$videoConn.show();
		if(!self.hasVGAVideo) {
			self.layoutType = 3;
			// 隐藏图片索引
			self.$picIndexs.css({'height': '0px'}).hide();
		} else {
			// 显示VGA路
			self.$imageConn.show();
		}
	},
	
	
	adjustSize: function() {
		this.adjustPageSize();
		this.adjustVideoSizePosition();
	},
	
	initVideoEventListener: function() {
		if(!this.hasVGAVideo) {
			return false;
		}
		var self = this,
			videoConnObj = self.$videoConn[0],
			pointerX = 0,
			contentsWidth = 0,
			contentsHeight = 0,
			videoWidth = 0,
			videoHeigth = 0,
			videoLeft = 0,
			videoTop = 0,
			videoCSS = {},
			imgConnCSS = {};
		
		var moveVideo = function(evt) {
			var pageX, cssLeft = $(videoConnObj).position().left;
			if(mejs.MediaFeatures.hasTouch) {
				if (evt.targetTouches.length == 1) {
					var touch = evt.targetTouches[0];
					pageX = touch.pageX;
				}
			} else {
				pageX = evt.pageX;
			}
			
			cssLeft = cssLeft + (pageX - pointerX);
			pointerX = pageX;
			
			if(cssLeft < 10) {
				cssLeft = '10px';
			} 
			if(cssLeft > (contentsWidth - videoWidth - 20)) {
				cssLeft = (contentsWidth - videoWidth - 20) + 'px';
			}
			
			$(videoConnObj).css({
				'left': cssLeft
			});
			
		};
		
		var touchstartHandler = function(evt) {
			if(new Date().getTime() - self.currTimeStamp < 300) {
				return false;
			}
			if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
				return false;
			}
			
			if(!mejs.MediaFeatures.hasTouch) {
				evt.preventDefault();
			}
			
			if(mejs.MediaFeatures.hasTouch) {
				if (evt.targetTouches.length == 1) {
					var touch = evt.targetTouches[0];
					pointerX = touch.pageX;
				}
			} else {
				pointerX = evt.pageX;
			}
			
			contentsWidth = self.$contents.width();
			contentsHeight = self.$contents.height();
			videoWidth = self.$videoConn.width();
			videoHeight = self.$videoConn.height();
			videoLeft = self.$videoConn.position().left;
			videoTop = self.$videoConn.position().top;
			videoCSS = {
				'width': videoWidth + 'px',
				'height': videoHeight + 'px',
				'top': videoTop + 'px',
				'left': videoLeft + 'px'
			};
			
			if(mejs.MediaFeatures.hasTouch) {
				videoConnObj.addEventListener('touchmove', touchmoveHandler, false);
				videoConnObj.addEventListener('touchend', touchendHandler, false);
			} else {
				self.$body.bind('mousemove', touchmoveHandler);
				self.$body.bind('mouseup', touchendHandler);
			}
		}
		
		var touchmoveHandler = function(evt) {
			evt.preventDefault();
			moveVideo(evt);
		};
		
		var touchendHandler = function(evt) {
			if(!mejs.MediaFeatures.hasTouch) {
				evt.preventDefault();
			}
			
			var $videoConn = self.$videoConn, $imgConn = self.$imageConn;
			var videoImageModel = (self.$videoConn.attr('class').indexOf('video-left') != -1) ? true : false;
			if(videoImageModel) {
//				alert(1)
				if(Math.abs($videoConn.position().left - videoLeft) < 40) {
					$videoConn.animate(videoCSS);
				} else {
					$videoConn.attr('class', 'video-right');
					$imgConn.attr('class', 'video-left');
					self.adjustVideoSizePosition();
				}
			} else {
//				alert(2)
				if(Math.abs(videoLeft - $videoConn.position().left) < 40) {
					$videoConn.animate(videoCSS);
				} else {
					$videoConn.attr('class', 'video-left');
					$imgConn.attr('class', 'video-right');
					self.adjustVideoSizePosition();
				}
			}
			
			if(mejs.MediaFeatures.hasTouch) {
				videoConnObj.removeEventListener('touchmove', touchmoveHandler, false);
				videoConnObj.removeEventListener('touchend', touchendHandler, false);
			} else {
				self.$body.unbind('mousemove', touchmoveHandler);
				self.$body.unbind('mouseup', touchendHandler);
			}
			
			self.currTimeStamp = new Date().getTime();
		};
		
		if(mejs.MediaFeatures.hasTouch) {
			videoConnObj.addEventListener('touchstart', touchstartHandler, false);
		} else {
			$(videoConnObj).bind('mousedown', touchstartHandler);
		}
	},
	
	initImageEventListener: function() {
		if(!this.hasVGAVideo) {
			return false;
		}
		var self = this,
			imageConnObj = self.$imageConn[0],
			pointerX = 0,
			contentsWidth = 0,
			contentsHeight = 0,
			iamgeWidth = 0,
			iamgeHeigth = 0,
			iamgeLeft = 0,
			iamgeTop = 0,
			imageCSS = {};
		
		var moveVideo = function(evt) {
			var pageX,
				cssLeft = $(imageConnObj).position().left;
			if(mejs.MediaFeatures.hasTouch) {
				if (evt.targetTouches.length == 1) {
					var touch = evt.targetTouches[0];
					pageX = touch.pageX;
				}
			} else {
				pageX = evt.pageX;
			}
			
			cssLeft = cssLeft + (pageX - pointerX);
			pointerX = pageX;
			
			if(cssLeft < 10) {
				cssLeft = '10px';
			} 
			if(cssLeft > (contentsWidth - imageWidth - 20)) {
				cssLeft = (contentsWidth - imageWidth - 20) + 'px';
			}
			
			$(imageConnObj).css({
				'left': cssLeft
			});
		};
		
		var touchstartHandler = function(evt) {
			if(new Date().getTime() - self.currTimeStamp < 300) {
				return false;
			}
			if(self.mediaelementplayer.isFullScreen || self.isFullScreenVGA) {
				return false;
			}
			
			if(!mejs.MediaFeatures.hasTouch) {
				evt.preventDefault();
			}
			
			if(mejs.MediaFeatures.hasTouch) {
				if (evt.targetTouches.length == 1) {
					var touch = evt.targetTouches[0];
					pointerX = touch.pageX;
				}
			} else {
				pointerX = evt.pageX;
			}

			contentsWidth = self.$contents.width();
			contentsHeight = self.$contents.height();
			imageWidth = self.$imageConn.width();
			imageHeight = self.$imageConn.height();
			imageLeft = self.$imageConn.position().left;
			imageTop = self.$imageConn.position().top;
			imageCSS = {
					'width': imageWidth + 'px',
					'height': imageHeight + 'px',
					'top': imageTop + 'px',
					'left': imageLeft + 'px'
			};
			
			if(mejs.MediaFeatures.hasTouch) {
				imageConnObj.addEventListener('touchmove', touchmoveHandler, false);
				imageConnObj.addEventListener('touchend', touchendHandler, false);
			} else {
				self.$body.bind('mousemove', touchmoveHandler);
				self.$body.bind('mouseup', touchendHandler);
			}
		}
		
		var touchmoveHandler = function(evt) {
			evt.preventDefault();
			moveVideo(evt);
		};
		
		var touchendHandler = function(evt) {
			if(!mejs.MediaFeatures.hasTouch) {
				evt.preventDefault();
			}
			
			var $videoConn = self.$videoConn, $imgConn = self.$imageConn;
			var videoImageModel = (self.$videoConn.attr('class').indexOf('video-left') != -1) ? true : false;
			if(videoImageModel) {
//				alert(3)
				if(Math.abs(imageLeft - $imgConn.position().left) < 40) {
					$imgConn.animate(imageCSS);
				} else {
					$imgConn.attr('class', 'video-left');
					$videoConn.attr('class', 'video-right');
					self.adjustVideoSizePosition();
				}
			} else {
//				alert(4)
				if(Math.abs($imgConn.position().left - imageLeft) < 40) {
					$imgConn.animate(imageCSS);
				} else {
					$imgConn.attr('class', 'video-right');
					$videoConn.attr('class', 'video-left');
					self.adjustVideoSizePosition();
				}
			}
			
			if(mejs.MediaFeatures.hasTouch) {
				imageConnObj.removeEventListener('touchmove', touchmoveHandler, false);
				imageConnObj.removeEventListener('touchend', touchendHandler, false);
			} else {
				self.$body.unbind('mousemove', touchmoveHandler);
				self.$body.unbind('mouseup', touchendHandler);
			}
			
			self.currTimeStamp = new Date().getTime();
		};
		
		if(mejs.MediaFeatures.hasTouch) {
			imageConnObj.addEventListener('touchstart', touchstartHandler, false);
		} else {
			$(imageConnObj).bind('mousedown', touchstartHandler);
		}
		
	},
	
	picIndexer: {
		init: function() {
			// 绘制滑动按钮
			this.drawScrollBtn();
			// 触屏滚动
			if(mejs.MediaFeatures.hasTouch) {
				this.initEventForTouch();
			}
		},
		
		panelWidth: 0,
		
		scrollSteps: 3,
		
		currTime: new Date().getTime(),
		
		setCurrPic: function(id) {
			var picIndex = id.substring(5),
				left = - (this.panelWidth * (picIndex - 0.5) - $('#scrollConn').width() / 2);
			$('#scroll').animate({
				'left': left + 'px'
			}, function() {
				// 懒加载部分图片
				var scrollConnWidth = $('#scrollConn').width();
				$('img.lazy').each(function() {
					if($(this).offset().left < scrollConnWidth){
						$(this).lazyload();
					}
				});
			});	
			if(this.currPicID) {
				$('#' + this.currPicID).find('img').fadeTo('fast', 0.4);;
			}
			$('#' + id).find('img').fadeTo('fast', 1);		
			this.currPicID = id;
		},
		
		initEventForTouch: function() {
			var self = this,
				scrollObj = $('#scroll')[0],
				oldX, newX = 0,
				vbody = $('body')[0],
				isScrolling = false,
				touchstartHandler = function(evt) {
					isScrolling = true;
					if(evt.touches.length > 0) {
						var touch = evt.touches[0];
						oldX = touch.pageX;
					}
					vbody.addEventListener('touchmove', touchmoveHandler, false);
					vbody.addEventListener('touchend', touchendHandler, false);
				},
				touchmoveHandler = function(evt) {
					evt.preventDefault();
				},
				touchendHandler = function(evt) {
					if(evt.changedTouches.length > 0) {
						newX = evt.changedTouches[0].pageX;
					}
					if(Math.abs(newX-oldX) > 50) {
						if((newX - oldX) > 0) {
							$('.scrollBtn.left').click();
						} else {
							$('.scrollBtn.right').click();
						}
					}
					isScrolling = false;
					vbody.removeEventListener('touchmove', touchmoveHandler, false);
					vbody.removeEventListener('touchend', touchendHandler, false);
				};
			scrollObj.addEventListener('touchstart', touchstartHandler, false);			
		},
		
		drawScrollBtn: function() {
			var leftBtn = $('.scrollBtn.left'),
				rightBtn = $('.scrollBtn.right'),
				touchstartHandlerLeft = function() {
					leftBtn.css({
						"background-image": "url(padPlayer/css/pics/goleft_2.png)"
					});
					
				},
				
				touchstartHandlerRight = function() {
					rightBtn.css({
						"background-image": "url(padPlayer/css/pics/goright_2.png)"
					});
				},
				
				touchendHandlerLeft = function() {
					leftBtn.css({
						"background-image": "url(padPlayer/css/pics/goleft_1.png)"
					});
				},
				
				touchendHandlerRight = function() {
					rightBtn.css({
						"background-image": "url(padPlayer/css/pics/goright_1.png)"
					});
				}
				
			touchendHandlerLeft();
			touchendHandlerRight();
			
			if(mejs.MediaFeatures.hasTouch) {
				leftBtn[0].addEventListener('touchstart', touchstartHandlerLeft, false);
				leftBtn[0].addEventListener('touchend', touchendHandlerLeft, false);
				rightBtn[0].addEventListener('touchstart', touchstartHandlerRight, false);
				rightBtn[0].addEventListener('touchend', touchendHandlerRight, false);
			} else {
				leftBtn.bind('mouseover', touchstartHandlerLeft);
				leftBtn.bind('mouseout', touchendHandlerLeft);
				rightBtn.bind('mouseover', touchstartHandlerRight);
				rightBtn.bind('mouseout', touchendHandlerRight);
			}
			
			// 添加点击事件
			var self = this,
				lazyloadPic = function() {
					var scrollConnWidth = $('#scrollConn').width();
					$('img.lazy').each(function() {
						if($(this).offset().left < scrollConnWidth){
							$(this).lazyload();
						}
					});
				};
				
			$('.scrollBtn').click(function() {
				if(new Date().getTime() - self.currTime < 700) {
					return false;
				}
				
				var scrollDivWidth = $('#scroll').width(),
					scrollDivLeft = parseFloat($('#scroll').css('left')),
					scrollConnWidth = $('#scrollConn').width(),
					scrollWidth = self.panelWidth * self.scrollSteps,
					otherWidth;
				if($(this).is('.right')) {
					otherWidth = scrollDivWidth + scrollDivLeft - scrollConnWidth / 2 - self.panelWidth / 2;
					if(otherWidth < scrollWidth) {
						scrollWidth = otherWidth;
					}
					$('#scroll').animate({
						'left': '-=' + scrollWidth + 'px'
					}, 'slow', lazyloadPic);
				} else {
					otherWidth = scrollConnWidth / 2 - scrollDivLeft - self.panelWidth / 2;
					if(otherWidth < scrollWidth) {
						scrollWidth = otherWidth;
					}
					$('#scroll').animate({
						'left': '+=' + scrollWidth + 'px'
					}, 'slow', lazyloadPic);
				}
				self.currTime = new Date().getTime();
				
			});
			
		}
	}
};
window.GlobalPlayer = GlobalPlayer;

window.setPagePlayPause = function() {
	GlobalPlayer.mediaelementplayer.playorpause();
}

window.getPlayState = function() {
	return GlobalPlayer.mediaelementplayer.getPlayStatus();
}

window.getTotalTime = function() {
	return GlobalPlayer.mediaelementplayer.getTotalTime();
}

window.getCurrentPlayTime = function() {
	return GlobalPlayer.mediaelementplayer.getCurrentTime();
}

window.setCurrentPlayTime = function(time) {
	GlobalPlayer.skip(time);
}

})(jQuery);

$(function() {
	new GlobalPlayer();
	if(loadPage && typeof loadPage == 'function') {
		loadPage();
	}
});


